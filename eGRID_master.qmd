---
title: "eGRID Production"
author: 
  - "Sean Bock, Abt Global"
  - "Claire Lay, Abt Global"
  - "Justin Stein, Abt Global"
format: 
  html:
    toc: true
    toc-expand: true
    toc-location: left
    
    code-fold: true

editor: visual
project: 
  execute_dir: project
#css: style.css # specific branding/styling can be added here
---

# Overview

This is a Quarto file that documents and runs the code necessary to create the eGRID database. Along with sequentially executing the necessary scripts used to create the database, the process is documented throughout, including built-in outputs (e.g., counts of rows, variable names, etc.) and QA steps. This document can be used in two ways: First, when used within an IDE, such as RStudio, it serves as an enhanced master script, allowing users to easily perform each step necessary to create the eGRID database from within a single file. Second, when viewing as a rendered file, it provides thorough documentation of the steps involved in creating eGRID. When rendered, this file provides additional information and tools for navigating the project. The table of contents (TOC) provides both a convenient look at the project structure and method for navigating the document. There are also hidden code chunks throughout, marked by a button ("Code" with an arrow next to it). Clicking this button reveals the underlying code from the R script that is being sourced in a given section.

# Install Libraries and Set Parameters

Before loading any data or beginning to construct the eGRID database, we install all necessary libraries used in subsequent scripts. Next, the eGRID year is defined, which controls which year of data is loaded from the raw data sources.

## Install required libraries

This project uses the `renv` package to ensure reproducibility. `renv` creates a copy of the R environment, including all installed libraries and their versions, used in the project. Upon opening the R project, `renv` will prompt users to run the command `renv::restore()`, which installs all necessary libraries.

## Set eGRID year

Before raw data files are loaded, the eGRID year must be defined. By default, the year value is set to the most recent available year (i.e., the year for which all necessary data is available), which is currently set to 2022. To adjust this value, simply open the file `eGRID_year.txt`, change the year value, and save.

`set_eGRID_year.R` the year value defined in `eGRID_year.txt` in the system environment, which is used to define the year in subsequent scripts. Note that `set_eGRID_year.R` needs to be run even if `eGRID_year.txt` is not updated.

```{r}
#| label: set_eGRID_year
#| file: "scripts/set_eGRID_year.R"
```

**Current year setting: `r Sys.getenv("eGRID_year")`**

# Loading Data

## Loading data from raw sources

### EIA

As of 2024, the EIA API does not contain the most detailed data available, which is necessary for the construction of eGRID. More detailed data for the EIA forms [923](https://www.eia.gov/electricity/data/eia923/), [860](https://www.eia.gov/electricity/data/eia860/), and [861](https://www.eia.gov/electricity/data/eia861/) are available as zipped excel file downloads on the EIA website. `##_data_eia_load.R` creates a new folder in the project folder called "raw_data". The zip files for each of the forms are downloaded and unzipped within this newly created folder. Each excel file contains several sheets that serve as the raw EIA data sources used to create eGRID.

```{r}
#| label: data_load_eia
#| file: "scripts/data_load_eia.R"
#| warning: FALSE
#| error: FALSE
#| echo: fenced
```

The tables within EIA Files and Sheets display each of the unzipped raw files across the three EIA forms, including the sheets embedded within.

<!--# Would be nice to highlight the sheets that will actually be used in eGRID productions... -->

```{r}
#| message: FALSE
#| warning: FALSE
#| label: create_eia_sheets_list

library(readxl)
library(dplyr)
library(gt)
library(gtExtras)

# function to find all sheet names 
get_sheets <- function(form){
  
  path <- glue::glue("data/raw_data/{form}")
  
  if(form != "860m") {
    
    files <- list.files(path)
    
    # Filter only Excel files
    excel_files <- stringr::str_subset(files, ".xls|.xlsx")
    
    # read each sheet and store them in a list
    sheet_data <- purrr::map(excel_files, ~ readxl::excel_sheets(glue::glue("{path}/{.x}")))
    
    # set names for each element based on file name
    sheet_data_named <- setNames(sheet_data, excel_files)
    
    return(sheet_data_named)
    
  } else{
    
    sheet_data <- readxl::excel_sheets(glue::glue("{path}.xlsx"))
    
    return(sheet_data)
    
  }
}


sheets_923 <- get_sheets("923")
sheets_860 <- get_sheets("860")
sheets_861 <- get_sheets("861")
sheets_860m <- get_sheets("860m")

make_sheets_table <- function(sheets, form){
  
  if(form != "860m") {
  
      gt_table <- 
        tibble(sheets) %>% 
        mutate(File = names(sheets)) %>% 
        relocate(File) %>%
        tidyr::unnest(sheets) %>% 
        rename(!!glue::glue("EIA-{form}") := sheets) %>%
        group_by(File) %>% 
        gt::gt() %>% 
        gt::tab_style(
          style = cell_text(weight = "bold"),
          locations = cells_row_groups()
        ) %>% 
        gt::tab_style(
          style = cell_text(size = 14, weight = "bold"),
          locations = cells_column_labels()
        )
      
      return(gt_table)
      
  } else{
    
      gt_table <- 
        tibble(sheets) %>% 
        # mutate(File = names(sheets)) %>% 
        # relocate(File) %>%
        # tidyr::unnest(sheets) %>% 
        rename(!!glue::glue("EIA-{form}") := sheets) %>%
        # group_by(File) %>% 
        gt::gt() %>% 
        gt::tab_style(
          style = cell_text(weight = "bold"),
          locations = cells_row_groups()
        ) %>% 
        gt::tab_style(
          style = cell_text(size = 14, weight = "bold"),
          locations = cells_column_labels()
        )
      
      return(gt_table)
    
    
  }
  
  }
  
  # highlight_rows <- function(table, colname, vars){
  #    table %>% 
  #     tab_style(style = list(
  #       cell_fill(color = "skyblue")
  #       ),
  #       locations = cells_body(
  #         rows = {{colname}} %in%  vars
  #       ))
  #   
  #     
  # }

 tab_923 <- make_sheets_table(sheets_923, "923") #%>% highlight_rows(., "EIA-923", "8B Financial Information")

 tab_860 <- make_sheets_table(sheets_860, "860")
 tab_861 <- make_sheets_table(sheets_861, "861")
 tab_860m <- make_sheets_table(sheets_860m, "860m")
 
```

#### EIA Files and Sheets {#eia-files-sheets}

::: panel-tabset
#### EIA-923

```{r}
#| tbl-cap: "EIA-923 sheets"
#| echo: false
#| label: print_eia_923_sheets
tab_923
```

#### EIA-860

```{r}
#| tbl-cap: "EIA-860 sheets"
#| echo: false
#| label: print_eia_860_sheets
tab_860
```

#### EIA-861

```{r}
#| tbl-cap: "EIA-861 sheets"
#| echo: false
#| label: print_eia_861_sheets
tab_861
```

#### EIA-861m

```{r}
#| tbl-cap: "EIA-860m sheets"
#| echo: false
#| label: print_eia_860m_sheets
tab_861m
```
:::

### CAMD

The EPA's Clean Air Markets Division (CAMD) contains power plant emissions, compliance, and allowance data. We create and incorporate a composite file from several CAMD sources, containing data about facilities and annual emissions. Specifically, we include data about facility attributes, annual emissions, and annual emissions during ozone months.

These data are available through the [CAMPD API](https://www.epa.gov/power-sector/cam-api-portal#/documentation). `data_camd_api_load.R` connects to the CAMD api, downloads the facility attributes and emissions data for a selected year. These raw files will be combined and cleaned in subsequent steps. For this script to run, an API key is required.

An API key can be requested [here](https://www.epa.gov/power-sector/cam-api-portal#/api-key-signup). Once a key is obtained, paste your key into the file `api_keys/camd_api_key.txt` and save. Once saved, the script `data_camd_api_load.R` will be able to successfully connect to and load data from the CAMPD API.

```{r}
#| label: load_data_camd
#| file: "scripts/data_load_camd.R"

```

Three data tables are downloaded from the the CAMD api and stored as .RDS files: `camd_facilities.RDS`, `camd_emissions.RDS`, and `camd_emissions_ozone.RDS`. `camd_facilities.RDS` includes facility attributes. `camd_emissions.RDS` contains annual emissions data. And, `camd_emissions_ozone.RDS` contains annual emissions data for the ozone months. See a summary of each of the raw CAMD tables in the tabs below.

#### CAMD Raw Tables

```{r}
#| echo: false
#| label: create_camd_tables

source("scripts/functions/function_summary_table.R") # function to create summary table

camd_facilities <- read_rds("data/raw_data/camd/camd_facilities.RDS")
camd_emissions <- read_rds("data/raw_data/camd/camd_emissions.RDS")
camd_emissions_ozone <- read_rds("data/raw_data/camd/camd_emissions_ozone.RDS")

table_facilities <- create_summary_table(camd_facilities)
table_emissions <- create_summary_table(camd_emissions)
table_emissions_ozone <- create_summary_table(camd_emissions_ozone)


```

::: panel-tabset
#### CAMD facility attributes

```{r}
#| echo: false
#| label: print_camd_tab_facilities
table_facilities
```

#### CAMD annual emissions

```{r}
#| echo: false
#| label: print_camd_tab_emissions
table_emissions
```

#### CAMD ozone season emissions

```{r}
#| echo: false
#| label: print_camd_tab_emissions_ozone
table_emissions_ozone
```
:::

## Loading Crosswalks

<!--# [Insert info about crosswalks and static tables used here]-->

# Cleaning Raw Data Files

## EIA

```{r}
#| label: data_clean_eia
#| message: FALSE
#| warning: FALSE
#| file: "scripts/data_clean_eia.R"
```

From the raw Excel downloads, we load, clean, and save select files that are used in eGRID production. Four "clean" EIA files are ultimately created:

-   `eia_860_boil_gen_clean.RDS`

-   `eia_860_combined_clean.RDS`

-   `eia_923_gen_clean.RDS`

-   `eia_923_gen_fuel_clean.RDS`

There are several procedures that are applied to each of the raw EIA files:

-   Handling Excel format

    -   Each Excel file contains header rows of varying lengths. These rows are skipped when read in.

    -   Files contain various missing value characters, including: " ", "X", and ".". These characters are converted to explicit missing values (i.e., "NA")

-   Variable name standardization

    -   All variable names are converted to snake case (e.g., "snake_case").

    -   Each form includes identifiers such as a given plant name, prime mover, fuel type, etc., but the assigned column names are inconsistent. To facilitate data operations (e.g., joins) and reduce confusion, we use a common naming scheme across all files (including EIA and CAMD).

        -   `plant_id`

        -   `plant_name`

        -   `plant_state`

        -   `prime_mover`

        -   `fuel_type`

        -   `generator_id`

        -   `boiler_id`

        -   `nameplate_capacity`

Below we list out the raw files and an outline of the specific cleaning steps used to create the cleaned files.

### eia_860_boil_gen_clean

-   `r glue::glue("data/raw_data/860/6_1_EnviroAssoc_Y{egrid_year}.xlsx")`

    -   "Boiler Generator"

### eia_860_combined_clean

-   `r glue::glue("data/raw_data/860/3_1_Generator_Y{egrid_year}.xlsx")`

    -   "Operable"
    -   "Retired and Canceled"
    -   "Proposed"

### eia_923_gen_clean

-   `r glue::glue("EIA923_Schedules_2_3_4_5_M_12_{egrid_year}_Final.xlsx")`

    -   "Page 4 Generator Data'

### eia_923_gen_fuel_clean

-   `r glue::glue("EIA923_Schedules_2_3_4_5_M_12_{egrid_year}_Final.xlsx")`

    -   "Page 1 Generation and Fuel Data'
    -   "Page 1 Puerto Rico"

### 

### Summary tables

::: panel-tabset
#### eia_923_gen

```{r}
#| echo: false
#| label: create_summary_tab_923_gen

create_summary_table(readr::read_rds("data/clean_data/eia/eia_923_gen_clean.RDS"))
```

#### eia_923_gen_fuel

```{r}
#| echo: false
#| label: create_summary_tab_923_gen_feul

create_summary_table(readr::read_rds("data/clean_data/eia/eia_923_gen_fuel_clean.RDS"))
```

#### eia_860_combined

```{r}
#| echo: false
#| label: create_summary_tab_860_combined

create_summary_table(readr::read_rds("data/clean_data/eia/eia_860_combined_clean.RDS"))
```

#### eia_860_boil_gen

```{r}
#| echo: false
#| label: create_summary_tab_860_boil_gen

create_summary_table(readr::read_rds("data/clean_data/eia/eia_860_boil_gen_clean.RDS"))
```
:::

## CAMD

<!-- Need to document steps here -->

```{r}
#| message: false
#| label: data_clean_camd
#| file: "scripts/data_clean_camd.R"
```

```{r}
#| echo: false
#| label: create_camd_summary_table


create_summary_table(readr::read_rds("data/clean_data/camd/camd_clean.RDS"))
```

---
title: "eGRID Production"
author: "Sean Bock, Abt Associates"
format: 
  html:
    toc: true
    toc-expand: true
    toc-location: left
    
    code-fold: true

editor: visual
project: 
  execute_dir: project
---

# Overview

This is a Quarto file that documents and runs the code necessary to create the eGRID database. Along with sequentially executing the necessary scripts used to create the database, the process is documented throughout, including built-in outputs (e.g., counts of rows, variable names, etc.) and QA steps. This document can be used in two ways: First, when using within the RStudio IDE, it serves as an enhanced master script, allowing users to easily perform each step necessary to create the eGRID database from within a single file. Second, when viewing as a rendered file, it provides thorough documentation of the steps involved in creating eGRID. When rendered, this file provides additional information and tools for navigating the project. The table of contents (TOC) provides both a convenient look at the project structure and method for navigating the document. There are also hidden code chunks throughout, marked by a button ("Code" with an arrow next to it). Clicking this button reveals the underlying code from the R script that is being sourced in a given section.

# Install Libraries and Set Parameters

Before loading any data or beginning to construct the eGRID database, we install all necessary libraries used in subsequent scripts. Next, the eGRID year is defined, which controls which year of data is loaded from the raw data sources.

## Install required libraries

`install_libraries.R` contains a list of all libraries used throughout the creation of eGRID, checks to see if these libraries are already installed, and, if not, installs them.

```{r }
#| label: install_libraries
#| file: "scripts/install_libraries.R"
#| echo: TRUE
```

Required packages include: `r required_packages`

## Set eGRID year

Before raw data files are loaded, the eGRID year must be defined. By default, the year value is set to the most recent available year (i.e., the year for which all necessary data is available), which is currently set to 2022. To adjust this value, simply open the file `eGRID_year.txt`, change the year value, and save.

`set_eGRID_year.R` the year value defined in `eGRID_year.txt` in the system environment, which is used to define the year in subsequent scripts. Note that `set_eGRID_year.R` needs to be run even if `eGRID_year.txt` is not updated.

```{r}
#| label: set_eGRID_year
#| file: "scripts/set_eGRID_year.R"
```

**Current year setting: `r Sys.getenv("eGRID_year")`**

# Loading Data

## Loading data from raw sources

### EIA

As of 2024, the EIA API does not contain the most detailed data available, which is necessary for the construction of eGRID. More detailed data for the EIA forms [923](https://www.eia.gov/electricity/data/eia923/), [860](https://www.eia.gov/electricity/data/eia860/), and [861](https://www.eia.gov/electricity/data/eia861/) are available as zipped excel file downloads on the EIA website. `##_data_eia_load.R` creates a new folder in the project folder called "raw_data". The zip files for each of the forms are downloaded and unzipped within this newly created folder. Each excel file contains several sheets that serve as the raw EIA data sources used to create eGRID.

```{r}
#| label: data_load_eia
#| file: "scripts/data_load_eia.R"
#| warning: FALSE
#| error: FALSE
#| echo: fenced

```

The tables within EIA Files and Sheets display each of the unzipped raw files across the three EIA forms, including the sheets embedded within.

<!--# Would be nice to highlight the sheets that will actually be used in eGRID productions... -->

```{r}
#| message: FALSE
#| warning: FALSE

library(readxl)
library(dplyr)
library(gt)

# function to find all sheet names 
get_sheets <- function(form){
  
  path = glue::glue("data/raw_data/{form}")
  
  files <- list.files(path)
  
  # Filter only Excel files
  excel_files <- stringr::str_subset(files, ".xls|.xlsx")
  
  # read each sheet and store them in a list
  sheet_data <- purrr::map(excel_files, ~ readxl::excel_sheets(glue::glue("{path}/{.x}")))
  
  # set names for each element based on file name
  sheet_data_named <- setNames(sheet_data, excel_files)
  
  return(sheet_data_named)
}


sheets_923 <- get_sheets("923")
sheets_860 <- get_sheets("860")
sheets_861 <- get_sheets("861")

make_sheets_table <- function(sheets, form){
  
  gt_table <- 
    tibble(sheets) %>% 
    mutate(File = names(sheets)) %>% 
    relocate(File) %>%
    tidyr::unnest(sheets) %>% 
    rename(!!glue::glue("EIA-{form}") := sheets) %>%
    group_by(File) %>% 
    gt::gt() %>% 
    gt::tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_row_groups()
    ) %>% 
    gt::tab_style(
      style = cell_text(size = 14, weight = "bold"),
      locations = cells_column_labels()
    )
  
  return(gt_table)
  #return(assign(glue::glue("{form}_gt"), gt_table))
  
  }
  
 tab_923 <- make_sheets_table(sheets_923, "923")
 tab_860 <- make_sheets_table(sheets_860, "860")
 tab_861 <- make_sheets_table(sheets_861, "861")
 
```

#### EIA Files and Sheets {#eia-files-sheets}

::: panel-tabset
#### EIA-923

```{r}
#| tbl-cap: "EIA-923 sheets"
#| echo: false
tab_923
```

#### EIA-860

```{r}
#| tbl-cap: "EIA-860 sheets"
#| echo: false
tab_860
```

#### EIA-861

```{r}
#| tbl-cap: "EIA-861 sheets"
#| echo: false
tab_861
```
:::

### CAMD

The EPA's Clean Air Markets Program (CAMD) contains power plant emissions, compliance, and allowance data. We create and incorporate a composite file from several CAMD sources, containing data about facilities and annual emissions. Specifically, we include data about facility attributes, annual emissions, and annual emissions during ozone months.

These data are available through the [CAMPD API](https://www.epa.gov/power-sector/cam-api-portal#/documentation). `data_camd_api_load.R` connects to the CAMD api, downloads the facility attributes and emissions data for a selected year, and combines them to create a raw camd file that will be used in subsequent steps. For this script to run, an API key is required.

An API key can be requested [here](https://www.epa.gov/power-sector/cam-api-portal#/api-key-signup). Once a key is obtained, paste your key into the file `api_keys/camd_api_key.txt` and save. Once saved, the script `data_camd_api_load.R` will be able to successfully connect to and load data from the CAMPD API.

```{r}
#| label: load_data_camd
#| file: "scripts/data_load_camd.R"

```

Three data tables are downloaded from the the CAMD api and stored as .RDS files: `camd_facilities.RDS`, `camd_emissions.RDS`, and `camd_emissions_ozone.RDS`. `camd_facilities.RDS` includes facility attributes. `camd_emissions.RDS` contains annual emissions data. And, `camd_emissions_ozone.RDS` contains annual emissions data for the ozone months.

```{r}

```

## Loading Crosswalks

<!--# [Insert info about crosswalks and static tables used here]-->

# Cleaning Raw Data Files

## EIA

<!--# Update description here -->

### EIA-860

<!--# Update description here -->

## Plant file

<!--# Update with information about Plant File  -->

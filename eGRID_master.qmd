---
title: "eGRID Production"
author: 
  - "Sean Bock, Abt Global"
  - "Claire Lay, Abt Global"
  - "Justin Stein, Abt Global"
  - "Teagan Goforth, Abt Global"
  - "Emma Russell, Abt Global"
  - "Sara Sokolinski, Abt Global"
  - "Caroline Watson, Abt Global"
  - "Madeline Zhang, Abt Global"
freeze: true
format: 
  html:
    toc: true
    toc-expand: true
    toc-location: left
    html-table-processing: none
    code-fold: true
params:
  eGRID_year: "2021"
editor: visual
project: 
  execute_dir: project
css: style.css # specific branding/styling can be added here
---

# Overview

This project includes all necessary scripts and documentation to create the Emissions & Generation Resource Integrated Database (eGRID).

# Background

eGRID is a comprehensive source of data from EPA's Clean Air Markets Division on the environmental characteristics of almost all electric power generated in the United States. The preeminent source of emissions data for the electric power sector, eGRID is based on available plant-specific data for all U.S. electricity generating plants that provide power to the electric grid and report data to the U.S. government. Data reported include, but are not limited to, net electric generation; resource mix (for renewable and nonrenewable generation); mass emissions of carbon dioxide (CO2), nitrogen oxides (NOx), sulfur dioxide (SO2), methane (CH4), nitrous oxide (N2O), and mercury (Hg); emission rates for CO2, NOx, SO2, CH4, and N2O; heat input; and nameplate capacity. eGRID reports this information on an annual basis (as well as by ozone season for NOx) at different levels of aggregation.

The data includes emissions, emission rates, generation, heat input, resource mix, and many other attributes. eGRID is typically used for greenhouse gas registries and inventories, carbon footprints, consumer information disclosure, emission inventories and standards, power market changes, and avoided emission estimates.

The final eGRID database includes eight levels of data aggregation:

-   Unit

-   Generator

-   Plant

-   State

-   Balancing authority

-   eGRID subregion

-   NERC region

-   US

## Using the .qmd file

This is a Quarto (.qmd) file that documents and runs the code necessary to create the eGRID database. Along with sequentially executing the necessary scripts used to create the database, the process is documented throughout, including built-in outputs (e.g., counts of rows, variable names, etc.) and QA steps. This document can be used in two ways: First, when used within an IDE, such as RStudio, it serves as an enhanced master script, allowing users to easily perform each step necessary to create the eGRID database from within a single file. Second, when viewing as a rendered file, it provides thorough documentation of the steps involved in creating eGRID. When rendered, this file provides additional information and tools for navigating the project. The table of contents (TOC) provides both a convenient look at the project structure and method for navigating the document. There are also hidden code chunks throughout, marked by a button ("Code" with an arrow next to it). Clicking this button reveals the underlying code from the R script that is being sourced in a given section.

# Install Libraries and Set Parameters

Before loading any data or beginning to construct the eGRID database, we install all necessary libraries used in subsequent scripts. Next, the eGRID year is defined, which controls which year of data is loaded from the raw data sources.

## Install required libraries

The script `install_libraries.R` detects all necessary libraries within the project using `renv::dependencies()`, checks for installation, and installs (if needed) and loads into the workspace.

```{r}
#| label: install_libraries.R
#| file: "scripts/install_libraries.R"
#| echo: false
#| message: false

```

## Defining eGRID year

The year of eGRID specified as the parameter "eGRID_year" within the YAML of the Quarto document. When a year value needs to be specified (e.g., when pulling relevant data from the CAMPD API), it is done so by calling `params$eGRID_year`.

**Current year setting: `r params$eGRID_year`**

## Load all helper functions

There are a set of helper functions used throughout the project. These are defined in the folder `scripts/functions`. The `docstring` package is used to provide documentation for functions, similar to typical package documentation. To view the documentation for a given function, run `docstring({function_name})`

```{r}
#| label: load_functions
#| echo: false
#| message: false

# sourcing each file in functions folder
purrr::walk(paste0("scripts/functions/",list.files('scripts/functions')), ~ source(.x))

```

# Loading Data

## Loading data from raw sources

### EIA

The U.S. Energy Information Administration (EIA), a part of the Department of Energy, collects and maintains energy-related data for policy making and for the public. eGRID integrates several EIA data forms into its database for relevant values.

As of 2024, the EIA API does not contain the most detailed data available, which is necessary for the construction of eGRID. More detailed data for the EIA forms [923](https://www.eia.gov/electricity/data/eia923/), [860](https://www.eia.gov/electricity/data/eia860/), and [861](https://www.eia.gov/electricity/data/eia861/) are available as zipped excel file downloads on the EIA website. `data_eia_load.R` creates a new folder in the project folder called "raw_data". The zip files for each of the forms are downloaded and unzipped within this newly created folder. Each excel file contains several sheets that serve as the raw EIA data sources used to create eGRID.

```{r}
#| label: data_load_eia
#| file: "scripts/data_load_eia.R"
#| warning: FALSE
#| error: FALSE
#| echo: fenced
```

The tables within EIA Files and Sheets display each of the unzipped raw files across the three EIA forms, including the sheets embedded within.

```{r}
#| echo: false
#| label: custom_gt_print

library(knitr)
knit_print.gt <- function(x, ...) {
  stringr::str_c("<div style='all:initial;'>\n", gt::as_raw_html(x), "\n</div>") %>%
    knitr::asis_output()
}
registerS3method("knit_print", 'gt_tbl', knit_print.gt, envir = asNamespace("gt"))

```

<!--# Would be nice to highlight the sheets that will actually be used in eGRID productions... -->

```{r}
#| message: FALSE
#| warning: FALSE
#| label: create_eia_sheets_list

library(readxl)
library(dplyr)
library(gt)
library(gtExtras)


sheets_923  <- get_sheets("923")
sheets_860  <- get_sheets("860")
sheets_861  <- get_sheets("861")
sheets_860m <- get_sheets("860m")


tab_923  <- make_sheets_table(sheets_923, "923") 
tab_860  <- make_sheets_table(sheets_860, "860")
tab_861  <- make_sheets_table(sheets_861, "861")
tab_860m <- make_sheets_table(sheets_860m, "860m")
 
```

#### EIA Files and Sheets {#eia-files-sheets}

::: panel-tabset
#### Overview

*Click through the tabs above to view files represented from each EIA source.*

**EIA-923** = data reported on fuel consumption and generation

**EIA-860** = data reported on electric generators

**EIA-861** = data collected from distribution utilities and power marketers

**EIA-860m** = data reported monthly on generating units (used to obtain data for Puerto Rico)

#### EIA-923

```{r}
#| tbl-cap: "EIA-923 sheets"
#| echo: false
#| label: print_eia_923_sheets
tab_923
```

#### EIA-860

```{r}
#| tbl-cap: "EIA-860 sheets"
#| echo: false
#| label: print_eia_860_sheets
tab_860
```

#### EIA-861

```{r}
#| tbl-cap: "EIA-861 sheets"
#| echo: false
#| label: print_eia_861_sheets
tab_861
```

#### EIA-860m

```{r}
#| tbl-cap: "EIA-860m sheets"
#| echo: false
#| label: print_eia_860m_sheets
tab_860m
```
:::

### CAMD

The EPA's Clean Air Markets Division (CAMD) contains power plant emissions, compliance, and allowance data. We create and incorporate a composite file from several CAMD sources, containing data about facilities and annual emissions. Specifically, we include data about facility attributes, annual emissions, and annual emissions during ozone months.

These data are available through the [CAMPD API](https://www.epa.gov/power-sector/cam-api-portal#/documentation). `data_camd_api_load.R` connects to the CAMD api, downloads the facility attributes and emissions data for a selected year. These raw files will be combined and cleaned in subsequent steps. For this script to run, an API key is required.

An API key can be requested [here](https://www.epa.gov/power-sector/cam-api-portal#/api-key-signup). Once a key is obtained, paste your key into the file `api_keys/camd_api_key.txt` and save. Once saved, the script `data_camd_api_load.R` will be able to successfully connect to and load data from the CAMPD API.

```{r}
#| label: load_data_camd
#| warnings: false
#| message: false
#| error: false 
#| echo: fenced
#| file: "scripts/data_load_camd.R"

```

Three data tables are downloaded from the the CAMD api and stored into one .RDS file, `camd_raw.RDS`. This file consists of facility attributes, annual emissions data, and containing annual emissions data for the ozone months. See a summary of each of the raw CAMD tables in the tabs below.

#### CAMD Raw Tables

```{r}
#| echo: false
#| label: create_camd_tables
#| warnings: false

source("scripts/functions/function_summary_table.R") # function to create summary table

camd_raw <- read_rds(glue::glue("data/raw_data/camd/{params$eGRID_year}/camd_raw.RDS"))

table_camd_raw <- create_summary_table(camd_raw)

camd_facilities <- read_rds(glue::glue("data/raw_data/camd/{params$eGRID_year}/camd_facilities.RDS"))
camd_emissions <- read_rds(glue::glue("data/raw_data/camd/{params$eGRID_year}/camd_emissions.RDS"))
camd_emissions_ozone <- read_rds(glue::glue("data/raw_data/camd/{params$eGRID_year}/camd_emissions_ozone.RDS"))

table_facilities      <- create_summary_table(camd_facilities)
table_emissions       <- create_summary_table(camd_emissions)
table_emissions_ozone <- create_summary_table(camd_emissions_ozone)


```

::: panel-tabset
#### Overview

*Click through the tabs above to view files represented from each CAMD source.*

#### CAMD facility attributes

```{r}
#| echo: false
#| label: print_camd_tab_facilities
table_facilities
```

#### CAMD annual emissions

```{r}
#| echo: false
#| label: print_camd_tab_emissions
table_emissions
```

#### CAMD ozone season emissions

```{r}
#| echo: false
#| label: print_camd_tab_emissions_ozone
table_emissions_ozone
```
:::

## Loading Crosswalks

<!--# [Insert info about crosswalks and static tables used here]-->

Crosswalks and static tables are used to supplement CAMD and EIA files.

-   some to delete, some to add

-   information about groupings (like full names) - egrid subregion, ba names, fuel types/boiler type full names

```{r}

library(readxl)
library(dplyr)
library(gt)
library(gtExtras)


path <- glue::glue("data/static_tables")

    files <- list.files(path)
    
    # Filter only Excel files
    file_files <- stringr::str_subset(files, ".xls|.xlsx|.csv")
    

tab_xwalk <- 
      tibble(file_files) %>%
      rename("Crosswalks and Static Tables" = file_files) %>%
      gt::gt() %>% 
      gt::tab_style(
        style = cell_text(weight = "bold"),
        locations = cells_row_groups()
      ) %>% 
      gt::tab_style(
        style = cell_text(size = 14, weight = "bold"),
        locations = cells_column_labels()
      ) %>%
      gt::tab_caption(caption = glue::glue("Crosswalks and Static Tables"))

```

::: panel-tabset
#### Overview

*Click on tab to view static table files*

#### Files

```{r}
#| label: xwalk_summary
#| message: false
#| warning: false

tab_xwalk

```
:::

# Cleaning Raw Data Files

## CAMD

We begin by loading in `camd_raw.RDS` and standardizing column names.

There are several procedures applied to the raw CAMD file:

-   Variable name standardization

-   Removing unnecessary plants and columns

    -   Remove plants listed as future, retired, or long-term cold storage

    -   Remove plants with IDs above 80000, unless they are in Puerto Rico

-   Create source variables and apply source: `EPA/CAMD`

    -   `heat_input_source`

    -   `heat_input_oz_source`

    -   `nox_source`

    -   `nox_oz_source`

    -   `so2_source`

    -   `co2_source`

    -   `hg_source`

-   Recoding values to standardized abbreviations

    -   Ex. operating to OP, unit type abbr

-   Removing notes about start date

```{r}
#| message: false
#| label: data_clean_camd
#| file: "scripts/data_clean_camd.R"
```

::: panel-tabset
#### Overview

*Click tab above to view variables contained in* `camd_clean.RDS`.

#### CAMD clean

```{r}
#| echo: false
#| label: create_camd_summary_table

create_summary_table(readr::read_rds(glue::glue("data/clean_data/camd/{params$eGRID_year}/camd_clean.RDS")))
```
:::

## EIA

From the raw Excel downloads, we load, clean, and save select files that are used in eGRID production. Three "clean" EIA files are ultimately created:

-   `eia_923_clean.RDS`

-   `eia_860_clean.RDS`

-   `eia_861_clean.RDS`

Each of these .RDS files contains lists of the relevant tables (stored as dataframes) from each EIA form.

There are several procedures that are applied to each of the raw EIA files:

-   Handling Excel format

    -   Each Excel file contains header rows of varying lengths. These rows are skipped when read in.

    -   Files contain various missing value characters, including: " ","X", and ".". These characters are converted to explicit missing values (i.e., "NA")

-   Variable name standardization

    -   All variable names are converted to snake case (e.g., "snake_case").

    -   Each form includes identifiers such as a given plant name, prime mover, fuel type, etc., but the assigned column names are inconsistent. To facilitate data operations (e.g., joins) and reduce confusion, we use a common naming scheme across all files (including EIA and CAMD).

        -   `plant_id`

        -   `plant_name`

        -   `plant_state`

        -   `prime_mover`

        -   `fuel_type`

        -   `generator_id`

        -   `boiler_id`

        -   `nameplate_capacity`

```{r}
#| label: data_clean_eia
#| message: FALSE
#| warning: FALSE
#| file: "scripts/data_clean_eia.R"
```

```{r}
#| label: load_eia_clean_files
#| echo: false

eia_923_files <- read_rds(
        glue::glue("data/clean_data/eia/{params$eGRID_year}/eia_923_clean.RDS"))
eia_860_files <- read_rds(
        glue::glue("data/clean_data/eia/{params$eGRID_year}/eia_860_clean.RDS"))
eia_861_files <- read_rds(
        glue::glue("data/clean_data/eia/{params$eGRID_year}/eia_861_clean.RDS"))
```

### EIA-923

::: panel-tabset
#### Overview

*Click through the tabs above to preview values represented from required EIA-923 files.*

```{r}
#| results: asis
#| label: eia_923_summary_tabs
#| echo: false

tabs_923 <- 
  eia_923_files %>% 
  map(., ~ create_summary_table(.x))

purrr::iwalk(tabs_923, ~ {
  cat('#### ', .y, '\n\n')
  
  print(.x)
  
  cat('\n\n')
} )
```
:::

### EIA-860

::: panel-tabset
#### Overview

*Click through the tabs above to preview values represented from required EIA-860 files.*

```{r}
#| results: false
#| label: eia_860_summary_tabs
#| echo: false

tabs_860 <- 
  eia_860_files %>% 
  map(., ~ create_summary_table(.x))

```

```{r}
#| results: asis
#| label: eia_860_summary_tabs2
#| echo: false

purrr::iwalk(tabs_860, ~ {
  cat('#### ', .y, '\n\n')
  
  print(.x)
  
  cat('\n\n')
} )

```
:::

### EIA-861

::: panel-tabset
#### Overview

*Click through the tabs above to preview values represented from required EIA-861 files.*

```{r}
#| results: asis
#| label: eia_861_summary_tabs
#| echo: false
#| message: false


tabs_861 <- 
  eia_861_files %>% 
  map(., ~ create_summary_table(.x))

purrr::iwalk(tabs_861, ~ {
  cat('#### ', .y, '\n\n')
  
  print(.x)
  
  cat('\n\n')
} )
```
:::

# Generator File

```{r}
#| label: generator_file_create
#| file: "scripts/generator_file_create.R"
#| message: false

```

## Combining EIA sources

The generator file extracts data from eia_860_clean.RDS, including all operable and retired generators. The code pulls variables from EIA-860 data and counts the number of boilers. Then, we assign generation to each generator value.

- EIA-860 boiler and generator 
- EIA-860 combined

Direct generation is assigned to each generator values through the `EIA-923 Generator` file. For values not included in the `EIA-923 Generator` file, generation is determined by ratio using nameplate capacity ratio `EIA-923 Generator and Fuel` files. A generator level capacity factor is calculated, and a final round of updates for fuel types, plant codes, and plant names is applied.

crosswalks used: 
- xwalk_fuel_type.csv
- xwalk_oris_camd.csv

```{r}
#| label: generator_file_table
#| include: false


library(gt)
library(gtExtras)

generator_file <- readr::read_rds(
           glue::glue("data/outputs/{params$eGRID_year}/generator_file.RDS"))

# generator_file %>% 
#   gt::gt() %>%
#   gt::opt_interactive(use_search = TRUE) # enable interactivity
```

## View Data

::: panel-tabset
#### Overview

*Click through the tabs above to preview data contained within the generator file.*

#### Data Summary

```{r}
#| label: gen_file_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(generator_file)

```

#### Generation distributions (overall)

```{r}
#| label: gen_file_distributions 
#| warning: false
#| message: false
#| fig-height: 10


library(ggplot2)
library(patchwork)
library(ggiraph)

plot_gen_ann <- 
  generator_file %>% 
  ggplot(aes(x = generation_ann)) + 
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Annual Generation")

plot_gen_oz <-
  generator_file %>% 
  ggplot(aes(x = generation_oz)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Ozone Months Generation")

plot_gen_ann_source <-
  generator_file %>% 
  ggplot(aes(x = gen_data_source, y = generation_ann)) +
  ggiraph::geom_boxplot_interactive() + 
  theme_minimal() +
  coord_flip() +
  scale_x_discrete(labels = scales::wrap_format(30)) +
  labs(title = "Annual Generation by Data Source") 


  (plot_gen_ann + plot_gen_oz) / plot_gen_ann_source
```

#### Distribution of generator data sources

```{r}
#| label: generator_file_data_source_dists


generator_file %>% 
  count(gen_data_source) %>% 
  mutate(proportion = n/sum(n)) %>%
  ggplot(aes(x = gen_data_source, y = proportion)) +
  geom_col() +
  coord_flip() +
  scale_x_discrete(labels = scales::wrap_format(30)) +
  scale_y_continuous(labels = scales::label_percent()) +
  geom_text(aes(label = scales::percent(proportion)),
            nudge_y = .05) +
  theme_minimal() +
  labs(
    title = "Distribution of generation data sources",
    y = "Share of generators",
    x = NULL
  )
  

```
:::

# Unit File

```{r}
#| label: unit_file_create
#| file: "scripts/unit_file_create.R"
#| warning: false
#| message: false
```

The unit file data 
- includes grid connected units from EPA/ CAMD data 
- unique EIA-923 boilers - unique EIA-860 boilers
- renewable units from EIA not included previously
- Add plant/unit level descriptor variables from EIA CAPD and EIA units

-   extract number of generators associated with each boiler (from EIA-860)
-   estimate annual heat input and emission - ozone season reporters
-   flag which CAMD plants are ozone season reports - only report during ozone season (May - September)
    -   fill in missing months with EIA data

eGRID methodology 
- unit level emissions = CAMD Power Sector Emissions Data 
- for units not included in CAMD, but in EIA 
- reported unit level heat input from EIA
- distribute prime mover-level heat input to each unit based on unit proportion of nameplate capacity

Emissions and emission rates data included in this file:
 - NOx rates
 - NOx emissions factor
 - SO2 emissions factor
 - SO2 sulfur content
 - SO2 control efficiency
 - CO2
 
 Uses plant codes and plant names in EIA-EPA cross walk
 -  xwalk_epa_eia_power_sector.csv
 - biomass_units_to_add_to_unit_file.csv
 - xwalk_boiler_firing_type.csv
 - camd_plants_to_delete.csv
 - xwalk_860_boiler_control_id.csv
 - emission_factors.csv
 - og_oth_units_to_change_fuel_type.csv
 - co2_ch4_n2o_ef.csv
 - nrel_geothermal_table.csv
 - geothermal_emission_factors.csv
 - units_to_remove.csv
 - xwalk_pr_oris.csv
 

```{r}
#| label: unit_file_table
#| include: false

library(gt)
library(gtExtras)

unit_file <- readr::read_rds(
           glue::glue("data/outputs/{params$eGRID_year}/unit_file.RDS"))

```

## View Data

::: panel-tabset
#### Overview

*Click through the tabs above to preview data contained within the unit file.*

#### Data Summary

```{r}
#| label: unt_file_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(unit_file)
```

#### Generation distributions (overall)

```{r}
# #| label: unt_file_distributions  
# #| warning: false 
# #| message: false 
# #| fig-height: 10   
# 
# library(ggplot2) 
# library(patchwork) 
# library(ggiraph)  
# 
# plot_gen_ann <-    
#   generator_file %>%    
#   ggplot(aes(x = generation_ann)) +    
#   geom_boxplot() +   
#   theme_minimal() +   
#   labs(title = "Annual Generation")  
# 
# plot_gen_oz <-   generator_file %>%    
#   ggplot(aes(x = generation_oz)) +   
#   geom_boxplot() +   
#   theme_minimal() +   
#   labs(title = "Ozone Months Generation")  
# 
# plot_gen_ann_source <-   
#   generator_file %>%    
#   ggplot(aes(x = gen_data_source, y = generation_ann)) +   
#   ggiraph::geom_boxplot_interactive() +    
#   theme_minimal() +   
#   coord_flip() +   
#   scale_x_discrete(labels = scales::wrap_format(30)) +   
#   labs(title = "Annual Generation by Data Source")      
# 
# (plot_gen_ann + plot_gen_oz) / plot_gen_ann_source
```

#### Distribution of unit data sources

```{r}
# #| label: generator_file_data_source_dists   
# 
# generator_file %>%    
#   count(gen_data_source) %>%    
#   mutate(proportion = n/sum(n)) %>%   
#   ggplot(aes(x = gen_data_source, y = proportion)) +   
#   geom_col() +   
#   coord_flip() +   
#   scale_x_discrete(labels = scales::wrap_format(30)) +   
#   scale_y_continuous(labels = scales::label_percent()) +   
#   geom_text(aes(label = scales::percent(proportion)),             
#             nudge_y = .05) +   
#   theme_minimal() +   
#   labs(     
#     title = "Distribution of generation data sources",     
#     y = "Share of generators",     
#     x = NULL   
#     )    


```
:::

# Plant File

-   "plant level emissions reflect combination of monitored and estimated data"

-   emissions and emission rates - reflect \@ point of generation

    -   accounted: losses within generating plants
    -   not accounted: power purchases, imports, exports of electricity, transmission and distribution losses between points of generation and points of consumption, not account for pre-combustion emissions associated with extraction, processing, and transportation of fuels

-   contains adjusted and unadjusted emissions

-   emissions in plant file are based on adjusted emissions, net generation, adjusted heat input

-   plant level adjusted emission estimates

    -   adjustments for CHP facility, if 1 or more units at plant burn biomass
    -   adjustments for biomass
        -   assumption of zero emissions from biomass combustion
        -   biogas, biomass emissions, solid wste emissions
            -   solid waste = consists of mixture of biogenic materials (wood, paper, food waste) and fossil-based materials (plastics, and tires )
        -   plants have CHP flag and and biomass flag
    -   adjustment for CHP
        -   CHP facility = generating facility that produces electricity and another form of useful thermal energy (like heat or steam)
            -   used for industrial, commericial, heating or cooling purposes
            -   also known as cogeneration
            -   converts energy more efficiently that facilities separately produce heat and electricity
            -   plants designated as CHP facilities on EIA-860, EIA-923, and DOE CHP database
        -   allocate emission for CHP plants

-   electric allocation factor

```{r}
#| label: plant_file_create
#| file: "scripts/plant_file_create.R"
#| message: false
```

```{r}
#| label: plant_file_table
#| include: false


library(gt)
library(gtExtras)

plant_file <- readr::read_rds(
           glue::glue("data/outputs/{params$eGRID_year}/plant_file.RDS"))

```

## View Data

::: panel-tabset
#### Overview

*Click through the tabs above to preview data contained within the plant file.*

#### Data Summary

```{r}
#| label: plnt_file_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(plant_file)
```
:::

# Region Aggregation

- read in plant file
- static table nerc region names

1.  Sum the adjusted heat input, adjusted emissions, adjusted fuel-based emissions, generation, fuel-based net generation, and nameplate capacity from the plant-level data to the various aggregated levels (state, balancing authority, eGRID subregion, NERC region, and US level).

2.  Calculate the output, input, combustion output, fuel-specific output, fuel-specific input, and nonbaseload output emissions rates.

3.  Estimate the aggregated level resource mix based on the summed generation by fuel values from the plant file.

4.  Estimate the nonbaseload generation by fuel type and resource mix.

5.  Round data fields.

```{r}
#| label: region_aggregation_create
#| file: "scripts/region_aggregation_create.R"
#| message: false
```

```{r}
#| label: load_reg_agg_files
#| echo: false

ba_agg  <- read_rds(
        glue::glue("data/outputs/{params$eGRID_year}/ba_aggregation.RDS"))
st_agg  <- read_rds(
        glue::glue("data/outputs/{params$eGRID_year}/state_aggregation.RDS"))
srl_agg <- read_rds(
        glue::glue("data/outputs/{params$eGRID_year}/subregion_aggregation.RDS"))
nrl_agg <- read_rds(
        glue::glue("data/outputs/{params$eGRID_year}/nerc_aggregation.RDS"))
us_agg  <- read_rds(
        glue::glue("data/outputs/{params$eGRID_year}/us_aggregation.RDS"))
```

## View Data

::: panel-tabset
#### Overview

*Click through the tabs above to preview data for each region aggregation.*

**BA** = Balancing Authority Aggregation

**ST** = State Aggregation

**SRL** = Sub-region Aggregation

**NRL** = NERC Region Aggregation

**US** = U.S. Aggregation

#### BA

```{r}
#| label: ba_agg_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(ba_agg)
```


#### ST

```{r}
#| label: st_agg_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(st_agg)
```

#### SRL

```{r}
#| label: srl_agg_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(srl_agg)
```

#### NRL

```{r}
#| label: nrl_agg_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(nrl_agg)
```

#### US

```{r}
#| label: us_agg_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(us_agg)
```
:::

# Grid Gross Loss File

```{r}
#| label: grid_gross_loss_create
#| file: "scripts/grid_gross_loss_create.R"
#| message: false
```

```{r}
#| label: ggl_file_table
#| include: false


library(gt)
library(gtExtras)

ggl_file <- readr::read_rds(
           glue::glue("data/outputs/{params$eGRID_year}/grid_gross_loss.RDS"))

```

## View Data

::: panel-tabset
#### Overview

*Click through the tabs above to preview data contained within the grid gross loss (GGL) file.*

#### Data Summary

```{r}
#| label: ggl_file_summary
#| message: false
#| warning: false

library(gtExtras)

create_summary_table(ggl_file)
```
:::

# Metric Conversion File

The metric conversion script calculates the imperial units outputs into metric units.

-   add conversion factor table information
-   imperial value, imperial unit, metric value, metric unit

Add code chunk later

# Final Formatting

In order to output the data into a clean, readable form, a final style script is applied for all output files. For headers, we add descriptions and label conventions to maintain consistency with previous eGRID releases. Using R package `openxlsx`, we apply formatting and colors to categorize outputs and values. Formatting is applied for both imperial unit version and the metric unit version.

<!-- ```{r} -->

<!-- #| label: final_formatting -->

<!-- #| file: "scripts/final_formatting.R" -->

<!-- #| message: false -->

<!-- ``` -->

-   add metric final formatting

# eGRID Summary

```{r}
#| label: egrid_summary

print(glue::glue("Generator (GEN) Records: {nrow(generator_file)}"))
print(glue::glue("Unit (UNIT) Records: {nrow(unit_file)}"))
print(glue::glue("Plant (PLNT) Records: {nrow(plant_file)}"))
print(glue::glue("State (ST) Records: {nrow(st_agg)}"))
print(glue::glue("Balancing Authority (BA) Records: {nrow(ba_agg)}"))
print(glue::glue("eGRID Subregion (SRL) Records: {nrow(srl_agg)}"))
print(glue::glue("NERC Region (NRL) Records: {nrow(nrl_agg)}"))
print(glue::glue("US (US) Records: {nrow(us_agg)}"))


```

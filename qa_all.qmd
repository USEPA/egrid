---
title: "QA All Files"
format: 
  html:
    toc: true
    toc-expand: true
    toc-location: left
    html-table-processing: none
    code-fold: true
execute: 
  echo: false
  warning: false
  eval: false
editor: visual
project: 
  execute_dir: project
params:
  year: 2023
  year_abbrev: 23
---

This markdown file performs QA on the following files:

-   Master database

-   CHP database

-   Generator file

-   Unit file

-   Plant file

-   Region aggregation files

-   Subregion file

-   All file comparison

-   Output file

Each QA step will return a list of of issues raised. If there are no issues in the step, nothing will be returned.

```{r}
#| label: load-libraries
#| message: false

library(dplyr) 
library(tidyr) 
library(readr) 
library(readxl) 
library(ggplot2)

```

# Master Database QA

## Compare plants between EIA and CAMD

Check if any plants are only in the CAMD data and not EIA data. These plants will be checked with EPA to see if there are any ORIS (plant ID) matches we should be making or if the plants should be deleted.

<!--# Check if this is both EIA datasets or one. -->

```{r}
#| label: compare-eia-camd

# load in cleaned camd and eia data
camd <- read_rds(glue::glue("data/clean_data/camd/{params$year}/camd_clean.RDS"))
eia_860 <- read_rds(glue::glue("data/clean_data/eia/{params$year}/eia_860_clean.RDS")) 
eia_923 <- read_rds(glue::glue("data/clean_data/eia/{params$year}/eia_923_clean.RDS")) 
# INCLUDE 861 ALSO?

# compare to CAMD plants to delete in unit file
# CAMD plants to delete has not been added into unit file yet. 

# group data by distinct plant IDs
compare_plants <- camd %>% 
  select(plant_id, plant_name) %>% distinct() %>% 
  full_join(eia_860$plant %>% select(plant_id) %>% distinct() %>% 
              mutate(eia_860_plant_id = plant_id), by = "plant_id") %>% 
  full_join(eia_923$generation_and_fuel_combined %>% 
              select(plant_id) %>% distinct() %>% 
              mutate(eia_923_plant_id = plant_id), by = "plant_id")

# identify plants only present in CAMD data
check_compare_plants <- 
  compare_plants %>% 
  filter(!is.na(plant_id) & is.na(eia_860_plant_id) & is.na(eia_923_plant_id))

# print plants not in EIA
ifelse(nrow(check_compare_plants) == 0, "Status: PASS - No plants in CAMD not in EIA.", 
        glue::glue("Status: FAIL - {nrow(check_compare_plants)} plants in CAMD not in EIA."))

knitr::kable(check_compare_plants %>% select(plant_id, plant_name))

```

## Biomass units added table

Not automated. Need to check manually. Not done here.

## OG/OTH fuel crosswalks

Not automated. Need to check manually. Not done here.

## CAMD fuel crosswalks

Can maybe be automated. Will wait for confirmation.

# Generator File QA

Load generator file. Currently using preliminary data for eGRID `r params$year`.

```{r}
#| label: load-gen-file

generator_file <- read_excel(glue::glue("data/outputs/{params$year}/egrid{params$year}_data.xlsx"), sheet = glue::glue("GEN{params$year_abbrev}"), skip = 1) %>% 
  janitor::clean_names() %>% 
  rename("plant_name" = "pname", 
         "plant_id" = "orispl", 
         "generator_id" = "genid", 
         "retirement_year" = "genyrret", 
         "status" = "genstat")

```

## Duplicate generators

Check if there are any duplicate generators. There should be zero.

```{r}
#| label: generator-duplicates 

check_gen_duplicates <- generator_file %>% 
  group_by(plant_id, generator_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_gen_duplicates) == 0, "Status: PASS - No duplicates.", 
        glue::glue("Status: FAIL - {nrow(check_gen_duplicates)} generators are duplicated."))

knitr::kable(check_gen_duplicates %>% select(plant_id, generator_id, plant_name))

```

# Unit File QA

Load unit file.

Currently using preliminary data for eGRID `r params$year`.

```{r}
#| label: load-unit-file

unit_file <- read_excel(glue::glue("data/outputs/{params$year}/egrid{params$year}_data.xlsx"), sheet = glue::glue("UNT{params$year_abbrev}"), skip = 1) %>% 
  janitor::clean_names() %>% 
  rename("plant_name" = "pname", 
         "plant_id" = "orispl", 
         "unit_id" = "unitid", 
         "status" = "untopst")

```

## FC prime mover

FC prime mover units must not have any CO2 emissions or sources.

```{r}
#| label: unit-fc-pm

check_unit_fc_pm <- unit_file %>% 
  filter(prmvr == "FC" & !is.na(co2an)) 

ifelse(nrow(check_unit_fc_pm) == 0, "Status: PASS - All CO2 values for FC prime mover are NA.", 
        glue::glue("Status: FAIL - {nrow(check_unit_fc_pm)} FC units have non-zero CO2 values."))
  
knitr::kable(check_unit_fc_pm %>% select(plant_name, plant_id, unit_id))
```

## Heat input / emissions values for retired units

Check if any CAMD units that retired in current data year have heat input / emission values.

```{r}
#| label: unit-values-retired

check_unit_retired_values <-  unit_file %>% 
  filter(camdflag == "Yes" & status == "RE" & (htian > 0 | 
                                                htioz > 0 |
                                                noxan > 0 |
                                                noxoz > 0 |
                                                so2an > 0 |
                                                co2an > 0))

ifelse(nrow(check_unit_retired_values) == 0, 
       "Status: PASS - No units that are retired and have positive heat input or emissions.", 
        glue::glue("Status: FAIL - {nrow(check_unit_retirement)} units that are retired and 
                   have positive heat input or emissions."))

knitr::kable(check_unit_retired_values %>% select(plant_name, plant_id, unit_id))

```

## CAMD ozone season reporter outliers

Some CAMD units only report their ozone season emissions, so we try to gap fill the remaining months with EIA data. In the source columns, we have an option that states this (i.e. "EIA non-ozone season distributed and EPA/CAMD ozone season" for heat input and "Estimated using emissions factor and EIA data for non-ozone season and EPA/CAMD ozone season emissions" or "Estimated based on unit-level NOx emission rates and EPA/CAMD ozone season emissions" for annual NOx). We want to make sure that the NOx emissions we've assigned for these aren't extremely large outliers - especially compared to the ozone season values for NOx at the plant. So you'd filter the NOx source for these sources and then filter the NOx annual emissions from largest to smallest and see how those large ones compare to the ozone season NOx value. If super high we want to note that we need to look into that plant/unit.

<!--# Can we set a "super high" value? Do a stats test? -->
<!--# Compare to the average ratio of ozone nox to annual nox in the non-estimated values?-->


```{r}
#| label: unit-nox-outliers

check_unit_nox_outliers <- 
  unit_file %>% 
  filter(noxansrc %in% 
           c("Estimated using emissions factor and EIA data for non-ozone season 
             and EPA/CAMD ozone season emissions", 
             "Estimated based on unit-level NOx emission rates and EPA/CAMD ozone season emissions")) %>% 
  arrange(desc(noxan)) %>% select(plant_name, plant_id, unit_id, noxan, noxoz)

knitr::kable(check_unit_nox_outliers)

```

## Ozone emissions and heat input

Ozone emissions and heat input values must not be greater than annual values.

```{r}
#| label: unit-ozone

check_unit_ozone <- unit_file %>%
  filter((noxoz > noxan) | (htioz > htian))

ifelse(nrow(check_unit_ozone) == 0, 
       "Status: PASS - All ozone emissions and heat input values are less than annual values.", 
        glue::glue("Status: FAIL - {nrow(check_unit_ozone)} units have heat input values greater than annual values.")) 

knitr::kable(check_unit_ozone %>% select(plant_name, plant_id, unit_id))
```

## Positive annual heat input, missing ozone season for CAMD plants

Check if units with a positive annual heat input are missing ozone season data.

```{r}
#| label: unit-ozone-missing

check_unit_ozone_input <- unit_file %>% 
  filter(!is.na(htian) & is.na(htioz))

ifelse(nrow(check_unit_ozone_input) == 0, 
       "Status: PASS - All annual heat inputs have ozone heat inputs.", 
        glue::glue("Status: FAIL - {nrow(check_unit_ozone_input)} units have positive annual heat input with missing ozone season heat input."))

knitr::kable(check_unit_ozone_input %>% select(plant_name, plant_id, unit_id))

```

## Duplicate units

Check if there are any duplicate units. There should be zero.

```{r}
#| label: unit-duplicates

check_unit_duplicates <- unit_file %>% 
  group_by(plant_id, unit_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_unit_duplicates) == 0, "Status: PASS - No duplicates.", 
        glue::glue("Status: FAIL - {nrow(check_unit_duplicates)} units are duplicated."))

knitr::kable(check_unit_duplicates %>% select(plant_name, plant_id, unit_id))
```

## Negative emissions values

Check if any emission values are negative. The emissions to check are:

-   unadjusted annual NOx

-   unadjusted ozone NOx

-   unadjusted annual SO2

-   unadjusted annual CO2

-   unadjusted annual Hg

```{r}
#| label: unit-negative-emissions

check_unit_negative_emissions <-  unit_file %>% 
  filter(noxan < 0 |
          noxoz < 0 |
          so2an < 0 |
          co2an < 0 |
          hgan < 0)

ifelse(nrow(check_unit_negative_emissions) == 0, "Status: PASS - No negative emissions.", 
        glue::glue("Status: FAIL - {nrow(check_unit_negative_emissions)} units have negative emissions."))

knitr::kable(check_unit_negative_emissions %>% select(plant_name, plant_id, unit_id, noxan, noxoz, so2an, co2an))
```

## Emissions from zero emission fuels

Check if there are positive emission values from zero-emission fuels. There should be zero. The emission values to check are:

-   unadjusted annual NOx

-   unadjusted ozone NOx

-   unadjusted annual SO2

-   unadjusted annual CO2

-   unadjusted annual Hg

```{r}
#| label: unit-zero-emissions

check_unit_zero_emissions <-  unit_file %>% 
  filter(fuelu1 %in% c("WAT", "WND", "SUN", "NUC") & 
                        (!is.na(noxan) | noxan > 0 |
                        !is.na(noxoz) | noxoz > 0 |
                        !is.na(so2an) | so2an > 0 |
                        !is.na(co2an) | co2an > 0 |
                        !is.na(hgan) | hgan > 0)) 

ifelse(nrow(check_unit_zero_emissions) == 0, "Status: PASS - No positive emissions for zero emissions technologies.", 
        glue::glue("Status: FAIL {nrow(check_zero_emissions)} zero emission units have positive emissions."))

knitr::kable(check_unit_zero_emissions %>% select(plant_name, plant_id, unit_id, fuelu1,
                                                  noxan, noxoz, so2an, co2an, hgan))
```

## Primary fuel blanks

Check if any primary fuel rows are blank.

```{r}
#| label: unit-primary-fuel

check_unit_primary_fuel <- unit_file %>% 
  filter(is.na(fuelu1))

ifelse(nrow(check_unit_primary_fuel) == 0, "Status: PASS - No units have blank primary fuels.", 
        glue::glue("Status: FAIL - {nrow(check_unit_primary_fuel)} units have blank primary fuels."))

knitr::kable(check_unit_primary_fuel %>% select(plant_name, plant_id, unit_id, fuelu1, htian, htioz))

```

## Check CAMD flag and program code

Check if units with a CAMD flag have no program code. Columns: `PRGCODE` and `CAMDFLAG`.

```{r}
#| label: unit-camd-flag

check_unit_program_code <- unit_file %>% 
  filter(camdflag == "Yes" & is.na(prgcode))

ifelse(nrow(check_unit_program_code) == 0, "Status: PASS - All CAMD flags have a program code.", 
        glue::glue("Status: FAIL - {nrow(check_unit_program_code)} units have CAMD flag but no program code."))

knitr::kable(check_unit_program_code %>% select(plant_name, plant_id, unit_id))

```

## Emissions without heat input

Check if any units that have emission values are missing heat input values.

```{r}
#| label: unit-heat-input-missing

check_unit_heat_input <- unit_file %>% 
  filter((noxan > 0 | noxoz > 0 | so2an > 0 | co2an > 0 | hgan > 0) &
          (is.na(htian) | is.na(htioz)))

ifelse(nrow(check_unit_heat_input) == 0, "Status: PASS - All units with emissions have 
       heat input values.", 
        glue::glue("Status: FAIL - {nrow(check_unit_heat_input)} units with emissions are missing heat input values."))

knitr::kable(check_unit_heat_input %>% select(plant_name, plant_id, unit_id, htian, htioz, noxan, noxoz, so2an, co2an, hgan))

```

## Heat input without emissions

Check if any units have heat input values are missing emission values.

<!--# Can some units have only some emission types? Should "WH" and "PUR" be included? -->

```{r}
#| label: unit-emissions-missing

check_unit_emissions <- unit_file %>% 
  filter((!(fuelu1 %in% c("WAT", "WND", "SUN", "NUC", "MWH"))) & 
          (!(prmvr == "FC")) & 
          (is.na(noxan) & is.na(noxoz) & is.na(so2an) & is.na(co2an)) &
          (htian > 0 | htioz > 0))

ifelse(nrow(check_unit_emissions) == 0, "Status: PASS - All units with heat inputs 
       have emission values.", 
        glue::glue("Status: FAIL - {nrow(check_unit_emissions)} units with heat inputs are missing emission values."))

knitr::kable(check_unit_emissions %>% select(plant_name, plant_id, unit_id, fuelu1, prmvr, 
                                             htian, htioz, noxan, noxoz, so2an, co2an, hgan))

```

## Blanks in heat input and emissions

Check if units have blanks in heat input and emissions.

*Is this blanks emissions AND heat input or blank emissions OR heat input?*

<!--# which emissions are included here? -->

```{r}
#| label: unit-blanks

check_unit_blanks <- unit_file %>% 
  filter((is.na(htian) | is.na(htioz)) & (is.na(noxan) | is.na(noxoz) 
         | is.na(so2an) | is.na(co2an)))

ifelse(nrow(check_unit_blanks) == 0, "Status: PASS - All units with heat inputs have emission values.", 
        glue::glue("Status: FAIL - {nrow(check_unit_blanks)} units with heat inputs are missing emission values."))

knitr::kable(check_unit_blanks %>% select(plant_name, plant_id, unit_id, fuelu1, prmvr, 
                                             htian, htioz, noxan, noxoz, so2an, co2an))

```

## Positive NOx, missing SO2

Check if units have positive NOx values and missing SO2 values.

```{r}
#| label: unit-nox-so2

check_unit_nox_so2 <- unit_file %>% 
  filter((noxan > 0) & (is.na(so2an) | so2an == 0))

ifelse(nrow(check_unit_nox_so2) == 0, "All units with positive NOx values 
       have positive SO2 values.", 
       glue::glue("{nrow(check_unit_emissions)} units with positive NOx values have NA or 0 SO2 values."))

knitr::kable(check_unit_nox_so2 %>% select(plant_name, plant_id, unit_id, fuelu1, 
                                           prmvr, noxan, noxoz, so2an))

```

# Plant File QA

Load current year plant file and previous year plant file.

```{r}
#| label: load_plant_data
#| echo: false
#| warning: false

plant_file <- read_excel(glue::glue("data/outputs/{params$year}/egrid{params$year}_data.xlsx"), sheet = glue::glue("PLNT{params$year_abbrev}"), skip = 1) %>% 
              janitor::clean_names() %>% 
              rename("plant_id" = "orispl", 
                     "plant_name" = "pname")

plant_file_prev <- read_excel(glue::glue("data/outputs/{params$year-2}/egrid{params$year - 2}_data.xlsx"), sheet = glue::glue("PLNT{params$year_abbrev - 2}"), skip = 1) %>% 
              janitor::clean_names() %>% 
              rename("plant_id" = "orispl", 
                     "plant_name" = "pname", 
                     "lat_prev" = "lat", 
                     "lon_prev" = "lon", 
                     "chpflag_prev" = "chpflag", 
                     "subrgn_prev" = "subrgn")

```

## Difference in latitude and longitude

Check if plants have a difference in longitude and latitude in comparison to previous year data. This is checked to three decimal points.

```{r}
#| label: plant-lat-long

plant_file_lat_lon <- plant_file %>% 
  select(plant_id, lat, lon) %>% 
  left_join(plant_file_prev %>% 
  select(plant_id, lat_prev, lon_prev), by = "plant_id") %>% 
  mutate(across(where(is.numeric), round, 3))

check_plant_lat_lon <- plant_file_lat_lon %>%
  mutate(lat_diff = abs(lat) - abs(lat_prev), lon_diff = abs(lon) - abs(lon_prev)) %>% 
  filter(!(lat_diff == 0) | !(lon_diff == 0) | is.na(lat) | is.na(lon))

ifelse(nrow(check_plant_lat_lon) == 0, "Status: PASS - All plants have the same lat/lon as previous year.", 
        glue::glue("Status: FAIL - {nrow(check_plant_lat_lon)} plants have different lat/lon than last year."))
  
knitr::kable(check_plant_lat_lon %>% select(plant_id, lat, lat_prev, lat_diff,
                                            lon, lon_prev, lon_diff))

```

## CHP status change

Check if CHP status has changed from previous year.

```{r}
#| label: plant-chp-flag

plant_chp_flag <- plant_file %>% 
  left_join(plant_file_prev, by = c("plant_id")) %>% 
  mutate(chp_comparison = ifelse(chpflag == chpflag_prev, "Same", 
                                 "Changed"))
  
check_plant_chp_flag <- plant_chp_flag %>% 
  filter(chp_comparison == "Changed")
  

ifelse(nrow(check_plant_chp_flag) == 0, "Status: PASS - No CHP flags are different", 
        glue::glue("Status: FAIL - {nrow(check_plant_chp_flag)} plants have different CHP flags than last year."))

knitr::kable(check_plant_chp_flag %>% 
               select(plant_id, chpflag, chpflag_prev))

```

## Different subregions

Check if any plants have changed subregion from previous year.

```{r}
#| label: plant-subregion

plant_subregion <-  plant_file %>% 
  left_join(plant_file_prev, by = c("plant_id")) %>% 
  mutate(subrgn_comparison = ifelse(subrgn == subrgn_prev, "Same", 
                                 "Changed"))
  
check_plant_subrgn <- plant_subregion %>% 
  filter(subrgn_comparison == "Changed")
  

ifelse(nrow(check_plant_subrgn) == 0, "Status: PASS - No subregions are different", 
        glue::glue("Status: FAIL - {nrow(check_plant_subrgn)} plants have different subregions than last year."))

knitr::kable(check_plant_subrgn %>% select(plant_id, subrgn, subrgn_prev))

```

## Mislabeled subregions

Map plants for each region and fix accordingly if needed.

```{r}
#| label: load_subregion_shapefile 
#| results: false

# could read this from online link to reduce input files needed 
# link needs to be updated each year

sbrgn_shp <- sf::st_read("archive/egrid2021_subregions_shapefile/eGRID2021 Subregions Shapefile final.shp") %>% drop_na() %>% rename("subregion" = "SUBRGN") %>% 
  sf::st_transform(crs = "EPSG:4326")

multi_sbrgn_shp <- sf::st_read("archive/egrid2021_multiple_subregions_shapefile/eGRID2021 Multiple Subregions Shapefile final.shp") %>% 
  drop_na() %>% 
  rename("subregion" = "SUBRGN") %>% 
  sf::st_transform(crs = "EPSG:4326")

# plot subregions
#ggplot(sbrgn_shp[1]) + 
#  geom_sf() + 
#  coord_sf(xlim = c(-166, -67), ylim = c(19, 71))

#ggplot(multi_sbrgn_shp[1]) + 
#  geom_sf() + 
#  coord_sf(xlim = c(-166, -67), ylim = c(19, 71))

sf::sf_use_s2(FALSE)

```

Check if plant locations are in regions. If there are any plants that are not in the region or in the overlapping regions, they will appear in the table. Some of the plants in the table may be due to being on the edge of region boundaries.

<!--# need to update this to output table for each subregion -->

::: panel-tabset
### AKGD

```{r}
#| label: AKGD_map 
#| echo: false 
#| warning: false  

AKGD_plants <- plant_file %>% filter(subrgn == "AKGD") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") 

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) + 
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = AKGD_plants) +
  coord_sf(xlim = c(sf::st_bbox(AKGD_plants)[1] - 5, 
                             sf::st_bbox(AKGD_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AKGD_plants)[2] - 3, 
                             sf::st_bbox(AKGD_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
# rounding lat long may help capture edge case plants (that are just outside of boundary)
AKGD_shp <- sbrgn_shp %>% filter(subregion == "AKGD") %>% 
  sf::st_transform(crs = "EPSG:4326")

AKGD_plants <- 
  AKGD_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKGD_plants, AKGD_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKGD_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AKGD_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 

```

### AKMS

```{r}
#| label: AKMS_summary 
#| echo: false 
#| warning: false  

AKMS_plants <- plant_file %>% filter(subrgn == "AKMS") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") 

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = AKMS_plants) +
  coord_sf(xlim = c(sf::st_bbox(AKMS_plants)[1] - 5, 
                             sf::st_bbox(AKMS_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AKMS_plants)[2] - 3, 
                             sf::st_bbox(AKMS_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
AKMS_shp <- sbrgn_shp %>% filter(subregion == "AKMS") %>% 
  sf::st_transform(crs = "EPSG:4326")

AKMS_plants <- 
  AKMS_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKMS_plants, AKMS_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKMS_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AKMS_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### AZNM

```{r}
#| label: AZNM_summary 
#| echo: false 
#| warning: false  

AZNM_plants <- plant_file %>% filter(subrgn == "AZNM") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = AZNM_plants) +
  coord_sf(xlim = c(sf::st_bbox(AZNM_plants)[1] - 5, 
                             sf::st_bbox(AZNM_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AZNM_plants)[2] - 3, 
                             sf::st_bbox(AZNM_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
AZNM_shp <- sbrgn_shp %>% filter(subregion == "AZNM") %>% 
  sf::st_transform(crs = "EPSG:4326")

AZNM_plants <- 
  AZNM_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AZNM_plants, AZNM_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AZNM_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AZNM_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### CAMX

```{r}
#| label: CAMX_summary 
#| echo: false 
#| warning: false  

CAMX_plants <- plant_file %>% filter(subrgn == "CAMX") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = CAMX_plants) +
  coord_sf(xlim = c(sf::st_bbox(CAMX_plants)[1] - 5, 
                             sf::st_bbox(CAMX_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(CAMX_plants)[2] - 3, 
                             sf::st_bbox(CAMX_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
CAMX_shp <- sbrgn_shp %>% filter(subregion == "CAMX") %>% 
  sf::st_transform(crs = "EPSG:4326")

CAMX_plants <- 
  CAMX_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(CAMX_plants, CAMX_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(CAMX_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(CAMX_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### ERCT

```{r}
#| label: ERCT_summary 
#| echo: false 
#| warning: false  

ERCT_plants <- plant_file %>% filter(subrgn == "ERCT") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = ERCT_plants) +
  coord_sf(xlim = c(sf::st_bbox(ERCT_plants)[1] - 5, 
                             sf::st_bbox(ERCT_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(ERCT_plants)[2] - 3, 
                             sf::st_bbox(ERCT_plants)[4] + 3), 
                    expand = TRUE) 

ERCT_shp <- sbrgn_shp %>% filter(subregion == "ERCT") %>% 
  sf::st_transform(crs = "EPSG:4326")

ERCT_plants <- 
  ERCT_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(ERCT_plants, ERCT_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(ERCT_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(ERCT_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### FRCC

```{r}
#| label: FRCC_summary 
#| echo: false 
#| warning: false  

FRCC_plants <- plant_file %>% filter(subrgn == "FRCC") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = FRCC_plants) +
  coord_sf(xlim = c(sf::st_bbox(FRCC_plants)[1] - 2, 
                             sf::st_bbox(FRCC_plants)[3] + 2), 
                    ylim = c(sf::st_bbox(FRCC_plants)[2] - 2, 
                             sf::st_bbox(FRCC_plants)[4] + 2), 
                    expand = TRUE) 

FRCC_shp <- sbrgn_shp %>% filter(subregion == "FRCC") %>% 
  sf::st_transform(crs = "EPSG:4326")

FRCC_plants <- 
  FRCC_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(FRCC_plants, FRCC_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(FRCC_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(FRCC_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### HIMS

```{r}
#| label: HIMS_summary 
#| echo: false 
#| warning: false  

HIMS_plants <- plant_file %>% filter(subrgn == "HIMS") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = HIMS_plants) +
  coord_sf(xlim = c(sf::st_bbox(HIMS_plants)[1] - 1, 
                             sf::st_bbox(HIMS_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(HIMS_plants)[2] - 1, 
                             sf::st_bbox(HIMS_plants)[4] + 1), 
                    expand = TRUE) 

HIMS_shp <- sbrgn_shp %>% filter(subregion == "HIMS") %>% 
  sf::st_transform(crs = "EPSG:4326")

HIMS_plants <- 
  HIMS_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(HIMS_plants, HIMS_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(HIMS_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(HIMS_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### HIOA

```{r}
#| label: HIOA_summary 
#| echo: false 
#| warning: false  

HIOA_plants <- plant_file %>% filter(subrgn == "HIOA") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = HIOA_plants) +
  coord_sf(xlim = c(sf::st_bbox(HIOA_plants)[1] - 1, 
                             sf::st_bbox(HIOA_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(HIOA_plants)[2] - 1, 
                             sf::st_bbox(HIOA_plants)[4] + 1), 
                    expand = TRUE) 

HIOA_shp <- sbrgn_shp %>% filter(subregion == "HIOA") %>% 
  sf::st_transform(crs = "EPSG:4326")

HIOA_plants <- 
  HIOA_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(HIOA_plants, HIOA_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(HIOA_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(HIOA_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### MROE

```{r}
#| label: MROE_summary 
#| echo: false 
#| warning: false  

MROE_plants <- plant_file %>% filter(subrgn == "MROE") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = MROE_plants) +
  coord_sf(xlim = c(sf::st_bbox(MROE_plants)[1] - 5, 
                             sf::st_bbox(MROE_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(MROE_plants)[2] - 3, 
                             sf::st_bbox(MROE_plants)[4] + 3), 
                    expand = TRUE) 

MROE_shp <- sbrgn_shp %>% filter(subregion == "MROE") %>% 
  sf::st_transform(crs = "EPSG:4326")

MROE_plants <- 
  MROE_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(MROE_plants, MROE_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(MROE_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(MROE_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### MROW

```{r}
#| label: MROW_summary 
#| echo: false 
#| warning: false  

MROW_plants <- plant_file %>% filter(subrgn == "MROW") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = MROW_plants) +
  coord_sf(xlim = c(sf::st_bbox(MROW_plants)[1] - 5, 
                             sf::st_bbox(MROW_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(MROW_plants)[2] - 3, 
                             sf::st_bbox(MROW_plants)[4] + 1), 
                    expand = TRUE) 

MROW_shp <- sbrgn_shp %>% filter(subregion == "MROW") %>% 
  sf::st_transform(crs = "EPSG:4326")

MROW_plants <- 
  MROW_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(MROW_plants, MROW_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(MROW_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(MROW_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### NEWE

```{r}
#| label: NEWE_summary 
#| echo: false 
#| warning: false  

NEWE_plants <- plant_file %>% filter(subrgn == "NEWE") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = NEWE_plants) +
  coord_sf(xlim = c(sf::st_bbox(NEWE_plants)[1] - 3, 
                             sf::st_bbox(NEWE_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(NEWE_plants)[2] - 1, 
                             sf::st_bbox(NEWE_plants)[4] + 1), 
                    expand = TRUE) 

NEWE_shp <- sbrgn_shp %>% filter(subregion == "NEWE") %>% 
  sf::st_transform(crs = "EPSG:4326")

NEWE_plants <- 
  NEWE_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NEWE_plants, NEWE_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NEWE_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(NEWE_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### NWPP

```{r}
#| label: NWPP_summary 
#| echo: false 
#| warning: false  

NWPP_plants <- plant_file %>% filter(subrgn == "NWPP") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = NWPP_plants) +
  coord_sf(xlim = c(sf::st_bbox(NWPP_plants)[1] - 2, 
                             sf::st_bbox(NWPP_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(NWPP_plants)[2] - 3, 
                             sf::st_bbox(NWPP_plants)[4] + 1), 
                    expand = TRUE) 

NWPP_shp <- sbrgn_shp %>% filter(subregion == "NWPP") %>% 
  sf::st_transform(crs = "EPSG:4326")

NWPP_plants <- 
  NWPP_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NWPP_plants, NWPP_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NWPP_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(NWPP_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### NYCW

```{r}
#| label: NYCW_summary 
#| echo: false 
#| warning: false  

NYCW_plants <- plant_file %>% filter(subrgn == "NYCW") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = NYCW_plants) +
  coord_sf(xlim = c(sf::st_bbox(NYCW_plants)[1] - 1, 
                             sf::st_bbox(NYCW_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(NYCW_plants)[2] - 1, 
                             sf::st_bbox(NYCW_plants)[4] + 1), 
                    expand = TRUE) 

NYCW_shp <- sbrgn_shp %>% filter(subregion == "NYCW") %>% 
  sf::st_transform(crs = "EPSG:4326")

NYCW_plants <- 
  NYCW_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYCW_plants, AKGD_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYCW_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(NYCW_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### NYLI

```{r}
#| label: NYLI_summary 
#| echo: false 
#| warning: false  

NYLI_plants <- plant_file %>% filter(subrgn == "NYLI") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = NYLI_plants) +
  coord_sf(xlim = c(sf::st_bbox(NYLI_plants)[1] - 1, 
                             sf::st_bbox(NYLI_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(NYLI_plants)[2] - 1, 
                             sf::st_bbox(NYLI_plants)[4] + 1), 
                    expand = TRUE) 

NYLI_shp <- sbrgn_shp %>% filter(subregion == "NYLI") %>% 
  sf::st_transform(crs = "EPSG:4326")

NYLI_plants <- 
  NYLI_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYLI_plants, NYLI_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYLI_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(NYLI_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### NYUP

```{r}
#| label: NYUP_summary 
#| echo: false 
#| warning: false  

NYUP_plants <- plant_file %>% filter(subrgn == "NYUP") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = NYUP_plants) +
  coord_sf(xlim = c(sf::st_bbox(NYUP_plants)[1] - 2, 
                             sf::st_bbox(NYUP_plants)[3] + 2), 
                    ylim = c(sf::st_bbox(NYUP_plants)[2] - 2, 
                             sf::st_bbox(NYUP_plants)[4] + 2), 
                    expand = TRUE) 

NYUP_shp <- sbrgn_shp %>% filter(subregion == "NYUP") %>% 
  sf::st_transform(crs = "EPSG:4326")

NYUP_plants <- 
  NYUP_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYUP_plants, NYUP_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(NYUP_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(NYUP_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### PRMS

```{r}
#| label: PRMS_summary 
#| echo: false 
#| warning: false  

PRMS_plants <- plant_file %>% filter(subrgn == "PRMS") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = PRMS_plants) +
  coord_sf(xlim = c(sf::st_bbox(PRMS_plants)[1] - 1, 
                             sf::st_bbox(PRMS_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(PRMS_plants)[2] - 1, 
                             sf::st_bbox(PRMS_plants)[4] + 1), 
                    expand = TRUE) 

PRMS_shp <- sbrgn_shp %>% filter(subregion == "PRMS") %>% 
  sf::st_transform(crs = "EPSG:4326")

PRMS_plants <- 
  PRMS_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(PRMS_plants, PRMS_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(PRMS_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(PRMS_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### RFCE

```{r}
#| label: RFCE_summary 
#| echo: false 
#| warning: false  

RFCE_plants <- plant_file %>% filter(subrgn == "RFCE") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = RFCE_plants) +
  coord_sf(xlim = c(sf::st_bbox(RFCE_plants)[1] - 3, 
                             sf::st_bbox(RFCE_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCE_plants)[2] - 2, 
                             sf::st_bbox(RFCE_plants)[4] + 2), 
                    expand = TRUE) 

RFCE_shp <- sbrgn_shp %>% filter(subregion == "RFCE") %>% 
  sf::st_transform(crs = "EPSG:4326")

RFCE_plants <- 
  RFCE_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCE_plants, RFCE_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCE_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(RFCE_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### RFCM

```{r}
#| label: RFCM_summary 
#| echo: false 
#| warning: false  

RFCM_plants <- plant_file %>% filter(subrgn == "RFCM") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = RFCM_plants) +
  coord_sf(xlim = c(sf::st_bbox(RFCM_plants)[1] - 3, 
                             sf::st_bbox(RFCM_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCM_plants)[2] - 2, 
                             sf::st_bbox(RFCM_plants)[4] + 2), 
                    expand = TRUE) 

RFCM_shp <- sbrgn_shp %>% filter(subregion == "RFCM") %>% 
  sf::st_transform(crs = "EPSG:4326")

RFCM_plants <- 
  RFCM_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCM_plants, RFCM_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCM_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(RFCM_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### RFCW

```{r}
#| label: RFCW_summary 
#| echo: false 
#| warning: false  

RFCW_plants <- plant_file %>% filter(subrgn == "RFCW") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = RFCW_plants) +
  coord_sf(xlim = c(sf::st_bbox(RFCW_plants)[1] - 3, 
                             sf::st_bbox(RFCW_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCW_plants)[2] - 2, 
                             sf::st_bbox(RFCW_plants)[4] + 2), 
                    expand = TRUE)

RFCW_shp <- sbrgn_shp %>% filter(subregion == "RFCW") %>% 
  sf::st_transform(crs = "EPSG:4326")

RFCW_plants <- 
  RFCW_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCW_plants, RFCW_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RFCW_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AKGD_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### RMPA

```{r}
#| label: RMPA_summary 
#| echo: false 
#| warning: false  

RMPA_plants <- plant_file %>% filter(subrgn == "RMPA") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = RMPA_plants) +
  coord_sf(xlim = c(sf::st_bbox(RMPA_plants)[1] - 3, 
                             sf::st_bbox(RMPA_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RMPA_plants)[2] - 2, 
                             sf::st_bbox(RMPA_plants)[4] + 2), 
                    expand = TRUE)

RMPA_shp <- sbrgn_shp %>% filter(subregion == "RMPA") %>% 
  sf::st_transform(crs = "EPSG:4326")

RMPA_plants <- 
  RMPA_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RMPA_plants, RMPA_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(RMPA_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(RMPA_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SPNO

```{r}
#| label: SPNO_summary 
#| echo: false 
#| warning: false  

SPNO_plants <- plant_file %>% filter(subrgn == "SPNO") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SPNO_plants) +
  coord_sf(xlim = c(sf::st_bbox(SPNO_plants)[1] - 3, 
                             sf::st_bbox(SPNO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SPNO_plants)[2] - 2, 
                             sf::st_bbox(SPNO_plants)[4] + 2), 
                    expand = TRUE)

SPNO_shp <- sbrgn_shp %>% filter(subregion == "SPNO") %>% 
  sf::st_transform(crs = "EPSG:4326")

SPNO_plants <- 
  SPNO_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SPNO_plants, SPNO_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SPNO_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SPNO_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SPSO

```{r}
#| label: SPSO_summary 
#| echo: false 
#| warning: false  

SPSO_plants <- plant_file %>% filter(subrgn == "SPSO") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SPSO_plants) +
  coord_sf(xlim = c(sf::st_bbox(SPSO_plants)[1] - 3, 
                             sf::st_bbox(SPSO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SPSO_plants)[2] - 2, 
                             sf::st_bbox(SPSO_plants)[4] + 2), 
                    expand = TRUE)

SPSO_shp <- sbrgn_shp %>% filter(subregion == "SPSO") %>% 
  sf::st_transform(crs = "EPSG:4326")

SPSO_plants <- 
  SPSO_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SPSO_plants, SPSO_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SPSO_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SPSO_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SRMV

```{r}
#| label: SRMV_summary 
#| echo: false 
#| warning: false  

SRMV_plants <- plant_file %>% filter(subrgn == "SRMV") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SRMV_plants) +
  coord_sf(xlim = c(sf::st_bbox(SRMV_plants)[1] - 3, 
                             sf::st_bbox(SRMV_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRMV_plants)[2] - 2, 
                             sf::st_bbox(SRMV_plants)[4] + 2), 
                    expand = TRUE)

SRMV_shp <- sbrgn_shp %>% filter(subregion == "SRMV") %>% 
  sf::st_transform(crs = "EPSG:4326")

SRMV_plants <- 
  SRMV_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRMV_plants, SRMV_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRMV_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SRMV_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SRSO

```{r}
#| label: SRSO_summary 
#| echo: false 
#| warning: false  

SRSO_plants <- plant_file %>% filter(subrgn == "SRSO") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SRSO_plants) +
  coord_sf(xlim = c(sf::st_bbox(SRSO_plants)[1] - 3, 
                             sf::st_bbox(SRSO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRSO_plants)[2] - 2, 
                             sf::st_bbox(SRSO_plants)[4] + 2), 
                    expand = TRUE)

SRSO_shp <- sbrgn_shp %>% filter(subregion == "SRSO") %>% 
  sf::st_transform(crs = "EPSG:4326")

SRSO_plants <- 
  SRSO_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRSO_plants, SRSO_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRSO_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SRSO_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SRTV

```{r}
#| label: SRTV_summary 
#| echo: false 
#| warning: false  

SRTV_plants <- plant_file %>% filter(subrgn == "SRTV") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SRTV_plants) +
  coord_sf(xlim = c(sf::st_bbox(SRTV_plants)[1] - 3, 
                             sf::st_bbox(SRTV_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRTV_plants)[2] - 2, 
                             sf::st_bbox(SRTV_plants)[4] + 2), 
                    expand = TRUE)

SRTV_shp <- sbrgn_shp %>% filter(subregion == "AKGD") %>% 
  sf::st_transform(crs = "EPSG:4326")

SRTV_plants <- 
  SRTV_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRTV_plants, SRTV_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRTV_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SRTV_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### SRVC

```{r}
#| label: SRVC_summary 
#| echo: false 
#| warning: false  

SRVC_plants <- plant_file %>% filter(subrgn == "SRVC") %>% 
  select(subrgn, plant_id, plfuelct, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot() + 
  geom_sf(data = sbrgn_shp, aes(fill = subregion)) +
  geom_sf(data = multi_sbrgn_shp, aes(color = "Multi-region")) +
  geom_sf(data = SRVC_plants) +
  coord_sf(xlim = c(sf::st_bbox(SRVC_plants)[1] - 3, 
                             sf::st_bbox(SRVC_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRVC_plants)[2] - 2, 
                             sf::st_bbox(SRVC_plants)[4] + 2), 
                    expand = TRUE)

SRVC_shp <- sbrgn_shp %>% filter(subregion == "SRVC") %>% 
  sf::st_transform(crs = "EPSG:4326")

SRVC_plants <- 
  SRVC_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRVC_plants, SRVC_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(SRVC_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(SRVC_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```
:::

## FC prime mover

FC prime mover should have no (NA) values for:

-   CO2

-   CH4

-   N2O

-   combustion heat input

    ```{r}
    #| label: plant_fc_pm
    #| echo: false
    #| warning: false

    # need to identify plants that ONLY have FC prime mover - and extract plant IDs
    unit_fc_prmvr <- unit_file %>% filter(prmvr == "FC") %>% distinct(plant_id) %>% 
      pull(plant_id) 

    unit_other_prmvr <- unit_file %>% filter(plant_id %in% unit_fc_prmvr) %>% 
      filter(!(prmvr == "FC")) %>% distinct(plant_id) %>% pull(plant_id) 

    check_plant_fc_values <- 
      plant_file %>% filter((plant_id %in% unit_fc_prmvr & 
                              !(plant_id %in% unit_other_prmvr)) &
                             (!is.na(plco2an) | !is.na(plch4an) | !is.na(pln2oan) | 
                              !is.na(plhtian))) 

    ifelse(nrow(check_plant_fc_values) == 0, "No plants with FC prime mover ONLY have values for CO2, N2O, CH4, or annual combustion heat input.", 
            glue::glue("{nrow(check_plant_fc_values)} plants with FC prime mover ONLY have values for CO2, N2O, CH4, or annual combustion heat input."))

    knitr::kable(check_plant_fc_values %>% select(plant_id, plant_name, plco2an, 
                                                  plch4an, pln2oan, plhtian))

    ```

## Biomass adjustment emissions

We have columns labeled BIOCO2, BIOCH4, etc. We want to make sure the value in that column is [not greater]{.underline} than the total unadjusted emissions (columns UNCO2, UNCH4, etc.). We have a line of code that should set BIO columns to equal UN columns if it is larger, so want to check that is working.

```{r}
#| label: plant_biomass
#| echo: false
#| warning: false

check_plant_biomass_emissions <- 
  plant_file %>% filter((bionox > unnox) |
                          (bionoxoz > unnoxoz) |
                          (bioso2 > unso2) | 
                          (bioco2 > unco2) | 
                          (bioch4 > unch4) |
                          (bion2o > unn2o))

ifelse(nrow(check_plant_fc_values) == 0, "No plants have biomass emissions greater than unadjusted emissions.", 
        glue::glue("{nrow(check_plant_biomass_emissions)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name, unnox, 
                                                      bionox, unnoxoz, bionoxoz, 
                                                      unso2, bioso2, unco2, bioco2, 
                                                      unch4, bioch4, unn2o, bion2o))

```

## Ozone emissions and heat input check

For this, we want to check that the NOx ozone season emissions are not greater than the annual NOx emissions (so columns PLNOXAN and PLNOXOZ). Same with annual heat input and ozone season heat input (PLHTIAN and PLHTIOZ/PLHTIANT and PLHTIOZT).

```{r}
#| label: plant_ozone
#| echo: false
#| warning: false

check_plant_ozone <- 
  plant_file %>% filter((plnoxan < plnoxoz) |
                          (plhtian < plhtioz) |
                          (plhtiant < plhtiozt))

ifelse(nrow(check_plant_ozone) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_ozone)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name, plnoxan, 
                                                      plnoxoz, plhtian, plhtioz, 
                                                      plhtiant, plhtiozt))

```

## Duplicate plants

Check for duplicate plants. There should be none.

```{r}
#| label: plant_duplicates
#| echo: false
#| warning: false

check_plant_duplicate <- 
  plant_file %>% group_by(plant_id) %>% filter(n()>1)

ifelse(nrow(check_plant_duplicate) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_duplicate)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name))

```

## Negative emission values

```{r}
#| label: plant_negative_emissions
#| echo: false
#| warning: false

check_plant_neg_emissions <- 
  plant_file %>% filter((plnoxan < 0) | (plnoxoz < 0) | (plso2an < 0), 
                        (plco2an < 0) | (plch4an < 0) | (pln2oan < 0))

ifelse(nrow(check_plant_neg_emissions) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_neg_emissions)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_neg_emissions %>% select(plant_id, plant_name, plnoxan, 
                                                  plnoxoz, plso2an, plco2an, 
                                                  plch4an, pln2oan))

```

## Emission rate outliers

```{r}
#| label: calculate_stats
#| echo: false
#| warning: false

# output rates that are negative are typically zeroed out 
# here, we recalculate them and keep the negatives to identify outliers 

plant_rates <- 
  plant_file %>% 
  #select(plant_id, net_gen, heat_input, heat_input_oz, contains("rate")) # filter this way if using R plant file output
  select(plant_id, plant_name, plhtian, plhtioz, plngenan, plngenoz, plnoxan, plnoxoz, plso2an, plco2an, plch4an,
         pln2oan, plco2eqa, contains("ra"), contains("ro")) %>% 
  mutate(nox_output_rate = plnoxan / plngenan * 2000, 
         nox_oz_output_rate = plnoxoz / plngenoz * 2000, 
         so2_output_rate = plso2an / plngenan * 2000, 
         co2_output_rate = plco2an/ plngenan * 2000, 
         ch4_output_rate = plch4an / plngenan, 
         n2o_output_rate = pln2oan / plngenan,
         co2e_output_rate = plco2eqa / plngenan * 2000) 

plant_rates[sapply(plant_rates, is.infinite)] <- NA

plant_stats <- 
  plant_rates %>% 
  mutate(across(.cols = c(contains("rate"), contains("ra"), contains("ro")), 
                .fns = ~ mean(.x, na.rm = TRUE), 
                .names =  "{.col}_average"), 
         across(.cols = c(contains("rate"), contains("ra"), contains("ro"), -contains("average")), 
                .fns = ~ sd(.x, na.rm = TRUE), 
                .names =  "{.col}_sd"))

plant_stats[sapply(plant_stats, is.infinite)] <- NA

plant_zscore <- 
  plant_stats %>% 
  mutate(across(.cols = c(contains("rate"), contains("ra"), contains("ro"), -contains("average"), -contains("sd")), 
                .fns = ~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE), 
                .names =  "{.col}_zscore")) 
```

### Input rate

::: panel-tabset
#### NOx input rate

```{r}
#| label: plant_nox_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plnoxra_zscore > 3 | plnoxra_zscore < -3) %>% 
               arrange(desc(plnoxra_zscore)) %>% select(plant_id, plant_name, plnoxra_zscore, plnoxra))

```

#### NOx ozone input rate

```{r}
#| label: plant_noxoz_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plnoxro_zscore > 3 | plnoxro_zscore < -3) %>% 
               arrange(desc(plnoxro_zscore)) %>% select(plant_id, plant_name, plnoxro_zscore, plnoxro))
```

#### SO2 input rate

```{r}
#| label: plant_so2_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plso2ra_zscore > 3 | plso2ra_zscore < -3) %>% 
               arrange(desc(plso2ra_zscore)) %>% select(plant_id, plant_name, plso2ra_zscore, plso2ra))
```

#### CO2 input rate

```{r}
#| label: plant_co2_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plco2ra_zscore > 3 | plco2ra_zscore < -3) %>% 
               arrange(desc(plco2ra_zscore)) %>% select(plant_id, plant_name, plco2ra_zscore, plco2ra))

```

#### CH4 input rate

```{r}
#| label: plant_ch4_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plch4ra_zscore > 3 | plch4ra_zscore < -3) %>% 
               arrange(desc(plch4ra_zscore)) %>% select(plant_id, plant_name, plch4ra_zscore, plch4ra))

```

#### N2O input rate

```{r}
#| label: plant_n2o_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(pln2ora_zscore > 3 | pln2ora_zscore < -3) %>% 
               arrange(desc(pln2ora_zscore)) %>% select(plant_id, plant_name, pln2ora_zscore, pln2ora))

```

#### CO2e input rate

```{r}
#| label: plant_co2e_input_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(plc2era_zscore > 3 | plc2era_zscore < -3) %>% 
               arrange(desc(plc2era_zscore)) %>% select(plant_id, plant_name, plc2era_zscore, plc2era))

```
:::

### Output rates

::: panel-tabset
#### NOx output rate

```{r}
#| label: plant_nox_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(nox_output_rate_zscore > 3 | nox_output_rate_zscore < -3) %>% 
               arrange(desc(nox_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                nox_output_rate_zscore, nox_output_rate))

```

#### NOx ozone output rate

```{r}
#| label: plant_noxoz_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(nox_oz_output_rate_zscore > 3 | nox_oz_output_rate_zscore < -3) %>% 
               arrange(desc(nox_oz_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                   nox_oz_output_rate_zscore, nox_oz_output_rate))

```

#### SO2 output rate

```{r}
#| label: plant_so2_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(so2_output_rate_zscore > 3 | so2_output_rate_zscore < -3) %>% 
               arrange(desc(so2_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                so2_output_rate_zscore, so2_output_rate))

```

#### CO2 output rate

```{r}
#| label: plant_co2_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(co2_output_rate_zscore > 3 | co2_output_rate_zscore < -3) %>% 
               arrange(desc(co2_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                co2_output_rate_zscore, co2_output_rate))

```

#### CH4 output rate

```{r}
#| label: plant_ch4_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(so2_output_rate_zscore > 3 | so2_output_rate_zscore < -3) %>% 
               arrange(desc(so2_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                so2_output_rate_zscore, so2_output_rate))

```

#### N2O output rate

```{r}
#| label: plant_n2o_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(n2o_output_rate_zscore > 3 | n2o_output_rate_zscore < -3) %>% 
               arrange(desc(n2o_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                n2o_output_rate_zscore, n2o_output_rate))

```

#### CO2e output rate

```{r}
#| label: plant_co2e_output_outliers
#| echo: false
#| warning: false

knitr::kable(plant_zscore %>% filter(co2e_output_rate_zscore > 3 | co2e_output_rate_zscore < -3) %>% 
               arrange(desc(co2e_output_rate_zscore)) %>% select(plant_id, plant_name, 
                                                                 co2e_output_rate_zscore, co2e_output_rate))

```
:::

## Capacity factor

The capacity factor must be less than 1. Check if there are any instances of a capacity factor greater than 1.

```{r}
#| label: plant_cap_fac
#| echo: false
#| warning: false

check_plant_capfac <- 
  plant_file %>% filter(capfac > 1)

ifelse(nrow(check_plant_capfac) == 0, "No plants have capacity factor greater than 1.", 
        glue::glue("{nrow(check_plant_capfac)} plants have capacity factor greater than 1."))

knitr::kable(check_plant_capfac %>% select(plant_id, plant_name, plfuelct, 
                                           plprmfl, capfac))


```

## Electric allocation factor

```{r}
#| label: plant_elec_allocation
#| echo: false
#| warning: false

check_plant_elec_alloc <- 
  plant_file %>% filter(elcalloc < 0 | elcalloc > 1)

ifelse(nrow(check_plant_elec_alloc) == 0, "No plants have an electric allocation factor greater than 1 or less than 0.", 
        glue::glue("{nrow(check_plant_elec_alloc)} plants have electric allocation factor greater than 1 or less than 0."))

knitr::kable(check_plant_elec_alloc %>% select(plant_id, plant_name, elcalloc))

```

## Blank subregions

Check if any subregions are blank.

```{r}
#| label: plant_subrgn_blanks
#| echo: false
#| warning: false

check_plant_sbrgn_blanks <- 
  plant_file %>% filter(is.na(subrgn) | subrgn == "")

ifelse(nrow(check_plant_sbrgn_blanks) == 0, "No plants have blank subregions.", 
        glue::glue("{nrow(check_plant_sbrgn_blanks)} plants have blank subregions."))

knitr::kable(check_plant_sbrgn_blanks %>% select(plant_id, plant_name, subrgn))

```

## Nonbaseload factor

```{r}
#| label: plant_nb_factor
#| echo: false
#| warning: false

check_plant_nb_factor <- 
  plant_file %>% filter(nbfactor < 0 | nbfactor > 1)

ifelse(nrow(check_plant_nb_factor) == 0, "No plants have a nonbaseload factor greater than 1 or less than 0.", 
        glue::glue("{nrow(check_plant_nb_factor)} plants have a nonbaseload factor greater than 1 or less than 0."))

knitr::kable(check_plant_nb_factor %>% select(plant_id, plant_name, nbfactor))

```

## Primary fuel blanks

```{r}
#| label: plant_fuel_blanks
#| echo: false
#| warning: false

check_plant_fuel_blanks <- 
  plant_file %>% filter(is.na(plprmfl) | plprmfl == "")

ifelse(nrow(check_plant_fuel_blanks) == 0, "All plants have a primary fuel.", 
        glue::glue("{nrow(check_plant_fuel_blanks)} plants are missing a primary fuel."))

knitr::kable(check_plant_fuel_blanks %>% select(plant_id, plant_name, plprmfl))

```

## Primary fuel category matches primary fuel

```{r}
#| label: plant_fuel_cat
#| echo: false
#| warning: false

check_plant_fuelcat <- 
  plant_file %>% filter(is.na(plfuelct) |
                        (plfuelct == "COAL" & !(plprmfl %in% 
                          c("ANT","BIT", "COG", "LIG", "RC", "SGC", "SUB", "WC"))) |
                        (plfuelct == "GAS" & !(plprmfl %in% c("NG", "PG"))) | 
                        (plfuelct == "OIL" & !(plprmfl %in% 
                          c("DFO", "JF", "KER", "PC", "RFO", "WO"))) | 
                        (plfuelct == "OFSL" & !(plprmfl %in% c("BFG", "OG", "TDF"))) |
                        (plfuelct == "NUCLEAR" & !(plprmfl == "NUC")) | 
                        (plfuelct == "HYDRO" & !(plprmfl == "WAT")) | 
                        (plfuelct == "SOLAR" & !(plprmfl == "SUN")) | 
                        (plfuelct == "WIND" & !(plprmfl == "WND")) | 
                        (plfuelct == "GEOTHERMAL" & !(plprmfl == "GEO")) | 
                        (plfuelct == "OTHF" & !(plprmfl %in% 
                          c("H", "MWH", "OTH", "PRG", "PUR", "WH"))) | 
                        (plfuelct == "BIOMASS" & !(plprmfl %in% 
                           c("AB", "BG", "BLQ", "DG", "LFG", "MSB", "MSW", "OBG", "OBL",
                             "OBS", "SLW", "WDL", "WDS"))))

ifelse(nrow(check_plant_fuelcat) == 0, "All plants have a primary category and it matches the primary fuel.", 
        glue::glue("{nrow(check_plant_fuelcat)} plants are either missing a primary fuel category or primary fuel cateogry does not match primary fuel."))

knitr::kable(check_plant_fuelcat %>% select(plant_id, plant_name, plprmfl, plfuelct))
                          
```

## Emissions without heat input

Check if any values that have positive emission values are missing heat input.

```{r}
#| label: plant_emissions_no_heatinput
#| echo: false
#| warning: false

check_plant_emissions_heatinput <- 
  plant_file %>% filter((is.na(plhtiant) | is.na(plhtiozt)) & 
                        (plnoxan > 0 | plnoxoz > 0 | 
                         plso2an > 0 | plco2an > 0 |
                         plch4an > 0 | pln2oan > 0 | 
                         plco2eqa > 0))

ifelse(nrow(check_plant_emissions_heatinput) == 0, "All plants with emission values have heat input values.", 
        glue::glue("{nrow(check_plant_emissions_heatinput)} plants that have emissions values are missing heat input."))

knitr::kable(check_plant_emissions_heatinput %>% 
               select(plant_id, plant_name, plhtiant, plhtiozt, plnoxan, plnoxoz, 
                      plso2an, plco2an, plch4an, pln2oan, plco2eqa))

```

## Resource mix adds to 100

Confirm that the resource mix adds to 100%.

```{r}
#| label: plant_resource_mix
#| echo: false
#| warning: false

plant_resource_mix <- 
  plant_file %>% 
  mutate(resource_mix_total = plclpr + plolpr + plgspr + plncpr + plhypr + plbmpr + 
           plwipr + plsopr + plgtpr + plofpr + ploppr, 
         resource_mix_total = round(resource_mix_total, 3)) %>% 
  select(plant_id, plant_name, resource_mix_total)

check_plant_resource_mix <- 
  plant_resource_mix %>% filter(!(resource_mix_total == 1)) %>% 
  mutate()

ifelse(nrow(check_plant_resource_mix) == 0, "All plant resource mixes add to 100%.", 
        glue::glue("{nrow(check_plant_resource_mix)} plant resource mixes do not add to 100%."))

knitr::kable(check_plant_resource_mix %>% select(plant_id, plant_name,
                                                 resource_mix_total))

```

# Aggregation file QA

Load aggregation files.

```{r}
#| label: load_agg_files
#| echo: false
#| warning: false

state_agg <- read_rds("data/outputs/state_aggregation.RDS")
ba_agg <- read_rds("data/outputs/ba_aggregation.RDS")
subrgn_agg <- read_rds("data/outputs/egrid_subregion_aggregation.RDS")
nerc_agg <- read_rds("data/outputs/nerc_aggregation.RDS")

```

## Duplicate regions

::: panel-tabset
### State

```{r}
#| label: state_duplicates
#| echo: false
#| warning: false

check_state_duplicates <- 
  state_agg %>% group_by(state) %>% filter(n() > 1)

ifelse(nrow(check_state_duplicates) == 0, "No duplicate states.", 
        glue::glue("{nrow(check_state_duplicates)} duplicate states."))

knitr::kable(check_state_duplicates %>% select(state))
```

### BA

```{r}
#| label: ba_duplicates
#| echo: false
#| warning: false

check_ba_duplicates <- 
  ba_agg %>% group_by(balance_authority_code) %>% filter(n() > 1)

ifelse(nrow(check_ba_duplicates) == 0, "No duplicate BA regions.", 
        glue::glue("{nrow(check_ba_duplicates)} duplicate BA regions."))

knitr::kable(check_ba_duplicates %>% select(balance_authority_code))
```

### eGRID subregion

```{r}
#| label: subregion_duplicates
#| echo: false
#| warning: false

check_subregion_duplicates <- 
  subrgn_agg %>% group_by(sub_region) %>% filter(n() > 1)

ifelse(nrow(check_subregion_duplicates) == 0, "No duplicate eGRID subregions.", 
        glue::glue("{nrow(check_subregion_duplicates)} duplicate states."))

knitr::kable(check_subregion_duplicates %>% select(sub_region))
```

### NERC

```{r}
#| label: nerc_duplicates
#| echo: false
#| warning: false

check_nerc_duplicates <- 
  nerc_agg %>% group_by(nerc) %>% filter(n() > 1)

ifelse(nrow(check_nerc_duplicates) == 0, "No duplicate NERC regions.", 
        glue::glue("{nrow(check_state_duplicates)} duplicate NERC regions."))

knitr::kable(check_nerc_duplicates %>% select(nerc))
```
:::

## Resource mix

::: panel-tabset
### State

```{r}
#| label: state_mix
#| echo: false
#| warning: false

state_mix <- 
  state_agg %>% 
  mutate(resource_mix_total = state_coal_resource_mix + state_oil_resource_mix + 
           state_gas_resource_mix + state_nuclear_resource_mix + 
           state_hydro_resource_mix + state_biomass_resource_mix + 
           state_wind_resource_mix + state_solar_resource_mix + 
           state_geothermal_resource_mix + state_other_fossil_resource_mix + 
           state_other_purchased_resource_mix, 
         resource_mix_total = round(resource_mix_total, 3))

check_state_mix <- 
  state_mix %>% filter(!(resource_mix_total %in% c(0.999, 1.000, 1.001)))

ifelse(nrow(check_state_mix) == 0, "All state resource mixes add to 100%.", 
        glue::glue("{nrow(check_state_mix)} state resource mixes do not add to 100%."))

knitr::kable(check_state_mix %>% select(state, resource_mix_total))

```

### BA

```{r}
#| label: ba_mix
#| echo: false
#| warning: false

ba_mix <- 
  ba_agg %>% 
  mutate(resource_mix_total = ba_coal_resource_mix + ba_oil_resource_mix + 
           ba_gas_resource_mix + ba_nuclear_resource_mix + 
           ba_hydro_resource_mix + ba_biomass_resource_mix + 
           ba_wind_resource_mix + ba_solar_resource_mix + 
           ba_geothermal_resource_mix + ba_other_fossil_resource_mix + 
           ba_other_purchased_resource_mix, 
         resource_mix_total = round(resource_mix_total, 3))

check_ba_mix <- 
  ba_mix %>% filter(!(resource_mix_total %in% c(0.999, 1.000, 1.001)))

ifelse(nrow(check_ba_mix) == 0, "All BA resource mixes add to 100%.", 
        glue::glue("{nrow(check_ba_mix)} BA resource mixes do not add to 100%."))

knitr::kable(check_ba_mix %>% select(balance_authority_code, resource_mix_total))
```

### eGRID subregion

Need to update eGRID subregion resource mix to percentages.

```{r}
#| label: subregion_mix
#| echo: false
#| warning: false

subregion_mix <- 
  subrgn_agg %>% 
  mutate(resource_mix_total = egrid_coal_resource_mix + egrid_oil_resource_mix + 
           egrid_gas_resource_mix + egrid_nuclear_resource_mix + 
           egrid_hydro_resource_mix + egrid_biomass_resource_mix + 
           egrid_wind_resource_mix + egrid_solar_resource_mix + 
           egrid_geothermal_resource_mix + egrid_other_fossil_resource_mix + 
           egrid_other_purchased_resource_mix, 
         resource_mix_total = round(resource_mix_total, 3))

check_subregion_mix <- 
  subregion_mix %>% filter(!(resource_mix_total %in% c(0.999, 1.000, 1.001)))

ifelse(nrow(check_subregion_mix) == 0, "All subregion resource mixes add to 100%.", 
        glue::glue("{nrow(check_subregion_mix)} subregion resource mixes do not add to 100%."))

knitr::kable(check_subregion_mix %>% select(sub_region, resource_mix_total))
```

### NERC

```{r}
#| label: nerc_mix
#| echo: false
#| warning: false

nerc_mix <- 
  nerc_agg %>% 
  mutate(resource_mix_total = nerc_coal_resource_mix + nerc_oil_resource_mix + 
           nerc_gas_resource_mix + nerc_nuclear_resource_mix + 
           nerc_hydro_resource_mix + nerc_biomass_resource_mix + 
           nerc_wind_resource_mix + nerc_solar_resource_mix + 
           nerc_geothermal_resource_mix + nerc_other_fossil_resource_mix + 
           nerc_other_purchased_resource_mix, 
         resource_mix_total = round(resource_mix_total, 3))

check_nerc_mix <- 
  nerc_mix %>% filter(!(resource_mix_total %in% c(0.999, 1.000, 1.001)))

ifelse(nrow(check_nerc_mix) == 0, "All NERC resource mixes add to 100%.", 
        glue::glue("{nrow(check_nerc_mix)} NERC resource mixes do not add to 100%."))

knitr::kable(check_nerc_mix %>% select(nerc, resource_mix_total))
```
:::

## Digits for fuel specific input rates

Check there are an approporate number of digits for fuel specific input rates. For example, if N2O emissions are all zero, there is the possibility that there are not enough digits and they are rounding.

::: panel-tabset
### State

```{r}
#| label: state_rate_digits
#| echo: false
#| warning: false

knitr::kable(state_agg %>% select(state, contains("input_rate_")))
```

### BA

```{r}
#| label: ba_rate_digits
#| echo: false
#| warning: false

knitr::kable(ba_agg %>% select(balance_authority_code, contains("input_rate_")))
```

### eGRID subregion

```{r}
#| label: subregion_rate_digits
#| echo: false
#| warning: false

knitr::kable(subrgn_agg %>% select(sub_region, contains("input_rate_")))
```

### NERC

```{r}
#| label: nerc_rate_digits
#| echo: false
#| warning: false

knitr::kable(nerc_agg %>% select(nerc, contains("input_rate_")))
```
:::

# Subregion File Only QA

## Outlier check for emission rate

```{r}
#| label: calculate_subregion_outliers
#| echo: false
#| warning: false

plant_stats_summary <- 
  plant_stats %>% 
  select(contains("average"), contains("sd")) %>% distinct() 

subregion_stats <- 
  subrgn_agg %>% 
  mutate(across(.cols = c(contains("rate")), 
                .fns = ~ mean(.x, na.rm = TRUE), 
                .names =  "{.col}_average"), 
         across(.cols = c(contains("rate"), -contains("average")), 
                .fns = ~ sd(.x, na.rm = TRUE), 
                .names =  "{.col}_sd")) %>% 
  select(contains("average"), contains("sd")) %>% distinct()

stats_summary <- bind_cols(stats_summary, subregion_stats) 

subregion_input_zscore <- 
  subrgn_agg %>% 
  mutate(nox_output_zscore = (egrid_nox_output_rate - 
                                stats_summary$nox_output_rate_average)/ 
           stats_summary$nox_output_rate_sd, 
         
         nox_oz_output_zscore = (egrid_nox_oz_output_rate - 
                                   stats_summary$nox_oz_output_rate_average)/ 
           stats_summary$nox_oz_output_rate_sd, 
         
         so2_output_zscore = (egrid_so2_output_rate - 
                                stats_summary$so2_output_rate_average)/ 
           stats_summary$so2_output_rate_sd,
         
         co2_output_zscore = (egrid_co2_output_rate - 
                                stats_summary$co2_output_rate_average)/ 
           stats_summary$co2_output_rate_sd,
         
         ch4_output_zscore = (egrid_ch4_output_rate - 
                                stats_summary$ch4_output_rate_average)/ 
           stats_summary$ch4_output_rate_sd,
         
         n2o_output_zscore = (egrid_n2o_output_rate - 
                                stats_summary$n2o_output_rate_average)/ 
           stats_summary$n2o_output_rate_sd,
         
         co2e_output_zscore = (egrid_co2e_output_rate - 
                                 stats_summary$co2e_output_rate_average)/ 
           stats_summary$co2e_output_rate_sd,
         
         nox_input_zscore = (egrid_nox_input_rate - 
                                stats_summary$plnoxra_average)/ 
           stats_summary$plnoxra_sd, 
         
         nox_oz_input_zscore = (egrid_nox_oz_input_rate - 
                                   stats_summary$plnoxro_average)/ 
           stats_summary$plnoxro_sd, 
         
         so2_input_zscore = (egrid_so2_input_rate - 
                                stats_summary$plso2ra_average)/ 
           stats_summary$plso2ra_sd,
         
         co2_input_zscore = (egrid_co2_input_rate - 
                                stats_summary$plco2ra_average)/ 
           stats_summary$plco2ra_sd,
         
         ch4_input_zscore = (egrid_ch4_input_rate - 
                                stats_summary$plch4ra_average)/ 
           stats_summary$plch4ra_sd,
         
         n2o_input_zscore = (egrid_n2o_input_rate - 
                                stats_summary$pln2ora_average)/ 
           stats_summary$pln2ora_sd,
         
         co2e_input_zscore = (egrid_co2e_input_rate - 
                                 stats_summary$plc2era_average)/ 
           stats_summary$plc2era_sd) %>% 
  select(sub_region, contains("rate"), contains("ra"), contains("ro"), contains("zscore"))
```

### Overall input rates

Outliers are identified by any zscores for emission rates \> +/- 3 and are printed in the table if any exist.

```{r}
subregion_input_zscore <- 
  subrgn_agg %>% 
  mutate(nox_input_zscore = (egrid_nox_input_rate - 
                                stats_summary$plnoxra_average)/ 
           stats_summary$plnoxra_sd, 
         
         nox_oz_input_zscore = (egrid_nox_oz_input_rate - 
                                   stats_summary$plnoxro_average)/ 
           stats_summary$plnoxro_sd, 
         
         so2_input_zscore = (egrid_so2_input_rate - 
                                stats_summary$plso2ra_average)/ 
           stats_summary$plso2ra_sd,
         
         co2_input_zscore = (egrid_co2_input_rate - 
                                stats_summary$plco2ra_average)/ 
           stats_summary$plco2ra_sd,
         
         ch4_input_zscore = (egrid_ch4_input_rate - 
                                stats_summary$plch4ra_average)/ 
           stats_summary$plch4ra_sd,
         
         n2o_input_zscore = (egrid_n2o_input_rate - 
                                stats_summary$pln2ora_average)/ 
           stats_summary$pln2ora_sd,
         
         co2e_input_zscore = (egrid_co2e_input_rate - 
                                 stats_summary$plc2era_average)/ 
           stats_summary$plc2era_sd) %>% 
  select(sub_region, contains("rate"), contains("ra"), contains("ro"), contains("zscore"))
```

::: panel-tabset
#### NOx input rate

```{r}
#| label: subregion_nox_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(nox_input_zscore > 3 | 
                                                 nox_input_zscore < -3) %>% 
               select(sub_region, egrid_nox_input_rate, nox_input_zscore) %>% 
               arrange(desc(nox_input_zscore)))
```

#### NOx ozone input rate

```{r}
#| label: subregion_nox_oz_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(nox_oz_input_zscore > 3 
                                         | nox_oz_input_zscore < -3) %>% 
               select(sub_region, egrid_nox_oz_input_rate, nox_oz_input_zscore) %>% 
               arrange(desc(nox_oz_input_zscore)))

```

#### SO2 input rate

```{r}
#| label: subregion_so2_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(so2_input_zscore > 3 | 
                                                 so2_input_zscore < -3) %>% 
               select(sub_region, egrid_so2_input_rate, so2_input_zscore) %>% 
               arrange(desc(so2_input_zscore)))

```

#### CO2 input rate

```{r}
#| label: subregion_co2_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(co2_input_zscore > 3 | 
                                           co2_input_zscore < -3) %>% 
               select(sub_region, egrid_co2_input_rate, co2_input_zscore) %>% 
               arrange(desc(co2_input_zscore)))

```

#### CH4 input rate

```{r}
#| label: subregion_ch4_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(ch4_input_zscore > 3 | 
                                           ch4_input_zscore < -3) %>% 
               select(sub_region, egrid_ch4_input_rate, ch4_input_zscore) %>% 
               arrange(desc(ch4_input_zscore)))

```

#### N2O input rate

```{r}
#| label: subregion_n2o_input_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_input_zscore %>% filter(n2o_input_zscore > 3 | 
                                                 n2o_input_zscore < -3) %>% 
               select(sub_region, egrid_n2o_input_rate, n2o_input_zscore) %>% 
               arrange(desc(n2o_input_zscore)))

```
:::

### Overall output rates

Outliers are identified by any zscores for emission rates \> +/- 3 and are printed in the table if any exist.

```{r}
subregion_output_zscore <- 
  subrgn_agg %>% 
  mutate(nox_output_zscore = (egrid_nox_output_rate - 
                                stats_summary$nox_output_rate_average)/ 
           stats_summary$nox_output_rate_sd, 
         
         nox_oz_output_zscore = (egrid_nox_oz_output_rate - 
                                   stats_summary$nox_oz_output_rate_average)/ 
           stats_summary$nox_oz_output_rate_sd, 
         
         so2_output_zscore = (egrid_so2_output_rate - 
                                stats_summary$so2_output_rate_average)/ 
           stats_summary$so2_output_rate_sd,
         
         co2_output_zscore = (egrid_co2_output_rate - 
                                stats_summary$co2_output_rate_average)/ 
           stats_summary$co2_output_rate_sd,
         
         ch4_output_zscore = (egrid_ch4_output_rate - 
                                stats_summary$ch4_output_rate_average)/ 
           stats_summary$ch4_output_rate_sd,
         
         n2o_output_zscore = (egrid_n2o_output_rate - 
                                stats_summary$n2o_output_rate_average)/ 
           stats_summary$n2o_output_rate_sd,
         
         co2e_output_zscore = (egrid_co2e_output_rate - 
                                 stats_summary$co2e_output_rate_average)/ 
           stats_summary$co2e_output_rate_sd) %>% 
  select(sub_region, contains("rate"), contains("ra"), contains("ro"), contains("zscore"))
```

::: panel-tabset
#### NOx output rate

```{r}
#| label: subregion_nox_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(nox_output_zscore > 3 | 
                                                  nox_output_zscore < -3) %>% 
               select(sub_region, egrid_nox_output_rate, nox_output_zscore) %>% 
               arrange(desc(nox_output_zscore)))
```

#### NOx ozone output rate

```{r}
#| label: subregion_nox_oz_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(nox_oz_output_zscore > 3 
                                         | nox_oz_output_zscore < -3) %>% 
               select(sub_region, egrid_nox_oz_output_rate, nox_oz_output_zscore) %>% 
               arrange(desc(nox_oz_output_zscore)))

```

#### SO2 output rate

```{r}
#| label: subregion_so2_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(so2_output_zscore > 3 | 
                                                  so2_output_zscore < -3) %>% 
               select(sub_region, egrid_so2_output_rate, so2_output_zscore) %>% 
               arrange(desc(so2_output_zscore)))

```

#### CO2 output rate

```{r}
#| label: subregion_co2_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(co2_output_zscore > 3 | 
                                                  co2_output_zscore < -3) %>% 
               select(sub_region, egrid_co2_output_rate, co2_output_zscore) %>% 
               arrange(desc(co2_output_zscore)))

```

#### CH4 output rate

```{r}
#| label: subregion_ch4_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(ch4_output_zscore > 3 | 
                                                  ch4_output_zscore < -3) %>% 
               select(sub_region, egrid_ch4_output_rate, ch4_output_zscore) %>% 
               arrange(desc(ch4_output_zscore)))

```

#### N2O output rate

```{r}
#| label: subregion_n2o_output_outliers
#| echo: false
#| warning: false

knitr::kable(subregion_output_zscore %>% filter(n2o_output_zscore > 3 | 
                                                  n2o_output_zscore < -3) %>% 
               select(sub_region, egrid_n2o_output_rate, n2o_output_zscore) %>% 
               arrange(desc(n2o_output_zscore)))

```
:::

# All file QA

## Count of plants in generator, unit, and plant file are equivalent

```{r}
#| label: count_plants
#| echo: false
#| warning: false

glue::glue("{nrow(plant_file)} plants in plant file.")

glue::glue("{nrow(generator_file %>% distinct(plant_id))} plants in generator file.")

glue::glue("{nrow(unit_file %>% distinct(plant_id))} plants in unit file.")

```

## Sum of generation

Check that generation is equal across plant, generator and unit file.

```{r}
#| label: sum_generation
#| echo: false
#| warning: false

plant_gen_sum <- 
  plant_file %>% 
  summarize(gen_total = sum(plngenan, na.rm = TRUE), 
            gen_oz_total = sum(plngenoz, na.rm = TRUE))

generator_gen_sum <- 
  generator_file %>% 
  summarize(gen_total = sum(genntan, na.rm = TRUE),
            gen_oz_total = sum(genntoz, na.rm = TRUE))

glue::glue("Plant file total generation: {plant_gen_sum$gen_total}")
glue::glue("Generator file total generation: {generator_gen_sum$gen_total}")

glue::glue("Difference (plant - generator): {plant_gen_sum$gen_total - generator_gen_sum$gen_total}")
```

## Sum of emissions

Check that emissions are equal to each other across plant, generator, and unit file.

```{r}
#| label: sum_emissions
#| echo: false
#| warning: false

plant_emissions_sum <- 
  plant_file %>% 
  summarize(nox_total = sum(plnoxan, na.rm = TRUE), 
            nox_oz_total = sum(plnoxoz, na.rm = TRUE),
            so2_total = sum(plso2an, na.rm = TRUE), 
            co2_total = sum(plco2an, na.rm = TRUE), 
            hg_total = sum(plhgan, na.rm = TRUE))

unit_emissions_sum <- 
  unit_file %>% 
  summarize(nox_total = sum(noxan, na.rm = TRUE), 
            nox_oz_total = sum(noxoz, na.rm = TRUE),
            so2_total = sum(so2an, na.rm = TRUE), 
            co2_total = sum(co2an, na.rm = TRUE), 
            hg_total = sum(hgan, na.rm = TRUE))

glue::glue("NOx emissions -- plant: {plant_emissions_sum$nox_total}, unit: {unit_emissions_sum$nox_total}, difference: {plant_emissions_sum$nox_total - unit_emissions_sum$nox_total}")

glue::glue("NOx ozone emissions -- plant: {plant_emissions_sum$nox_oz_total}, unit: {unit_emissions_sum$nox_oz_total}, difference: {plant_emissions_sum$nox_oz_total - unit_emissions_sum$nox_oz_total}")

glue::glue("SO2 emissions -- plant: {plant_emissions_sum$so2_total}, unit: {unit_emissions_sum$so2_total}, difference: {plant_emissions_sum$so2_total - unit_emissions_sum$so2_total}")

glue::glue("CO2 emissions -- plant: {plant_emissions_sum$co2_total}, unit: {unit_emissions_sum$co2_total}, difference: {plant_emissions_sum$co2_total - unit_emissions_sum$co2_total}")

glue::glue("Hg emissions -- plant: {plant_emissions_sum$hg_total}, unit: {unit_emissions_sum$hg_total}, difference: {plant_emissions_sum$hg_total - unit_emissions_sum$hg_total}")

```

# Output file QA

Check excel summary links.

Data year correct in excel output.

Count of units/generators/plants in excel output match R datasets.

---
title: "QA All Files"
format: html
editor: visual
toc: true
---

This markdown file performs QA on the following files:

-   Master database

-   CHP database

-   Generator file

-   Unit file

-   Plant file

-   Region aggregation files

-   Subregion file

-   All file comparison

-   Output file

Each QA step will return a list of of issues raised. If there are no issues in the step, nothing will be returned.

```{r}
#| label: load_libraries
#| echo: false
#| warning: false

library(dplyr) 
library(tidyr) 
library(readr) 
library(readxl) 
library(stringr)
```

# Master Database

*Need to check what file this is.*

## Compare plants between EIA and CAMD

Check if any plants are only in the CAMD data and not EIA data. These plants will be checked with EPA to see if there are any ORIS (plant ID) matches we should be making or if the plants should be deleted.

## Biomass units added table

## OG/OTH fuel crosswalks

## CAMD fuel crosswalks

# CHP Database

## Retirement year to current year

```{r}
#| label: chp_retire_year
#| echo: false
#| warning: false



```

# Generator File

Load generator file.

```{r}
#| label: load_gen_file
#| echo: false
#| warning: false

generator_file <- read_rds("data/outputs/generator_file.RDS")

```

## Retirement year to current data year

*Is this for plants retired in current year?*

```{r}
#| label: generator_retirement 
#| echo: false
#| warning: false

check_gen_retirement<- 
  generator_file %>% filter(status == "RE" | !is.na(retirement_year))

ifelse(nrow(check_gen_retirement) == 0, "No retirements to update.", 
        glue::glue("{nrow(check_gen_retirement)} generators to update retirements."))
```

## Duplicate generators

Check if there are any duplicate generators. There should be zero.

```{r}
#| label: generator_duplicates 
#| echo: false
#| warning: false

check_gen_duplicates <- 
  generator_file %>% group_by(plant_id, generator_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_gen_duplicates) == 0, "No duplicates.", 
        {glue::glue("{nrow(check_gen_duplicates)} generators are duplicated."); 
          knitr::kable(check_gen_duplicates)})

```

## Retired units with generation

Check if there are any retired units that are not retired in the current year that have generation values.

*Are units retired before this year included? Ask about this.*

```{r}
#| label: generator_retired_gen 
#| echo: false
#| warning: false

check_gen_retirement_generation <- 
  generator_file %>% 
  filter(status == "RE")

ifelse(nrow(check_gen_retirement_generation == 0), "No retired units to udpate.", 
        {glue::glue("{nrow(check_gen_duplicates)} retired units to be updated.");
          knitr::kable(check_gen_retirement_generation %>% select(plant_name, plant_id, generator_id))})

```

# Unit File QA

Load unit file.

Currently using unit file data from published eGRID 2021.

```{r}
#| label: load_unit_file
#| echo: false
#| warning: false

unit_file <- read_excel("archive/egrid2021_data.xlsx", sheet = "UNT21", skip = 1) %>% 
  janitor::clean_names() %>% 
  rename("plant_name" = "pname", 
         "plant_id" = "orispl", 
         "unit_id" = "unitid", 
         "status" = "untopst")

```

## FC prime mover

FC prime mover units must not have any CO2 emissions or sources.

```{r}
#| label: unit_fc_pm
#| echo: false
#| warning: false

check_unit_fc_pm <- 
  unit_file %>% filter(prmvr == "FC" & !is.na(co2an)) 

ifelse(nrow(check_unit_fc_pm) == 0, "All CO2 values for FC prime mover are NA.", 
        {glue::glue("{nrow(check_unit_fc_pm)} FC units have non-zero CO2 values."); 
          knitr::kable(check_unit_fc_pm %>% select(plant_name, plant_id, unit_id))})
```

## Retirement year to current year

Update retirement year to current year for retired units.

*Need clarification here.*

*Retirement year does not exist in unit file?*

```{r}
#| label: unit_retirement_cur_year
#| echo: false
#| warning: false

check_unit_retirement<- 
  unit_file %>% filter(status == "RE" | !is.na(retirement_year))

ifelse(nrow(check_unit_retirement) == 0, "No retirements to update.", 
        glue::glue("{nrow(check_unit_retirement)} units to update retirements."))

```

## Heat input / emissions values for retired units

Check if any CAMD units that retired in current data year have heat input / emission values.

```{r}
#| label: unit_values_retired
#| echo: false
#| warning: false

check_unit_retired_values <- 
  unit_files %>% filter(camdflag == "Yes" & status = "RE" & (htian > 0 | )

```

## CAMD ozone season reporter outliers 

Some CAMD units only report their ozone season emissions, so we try to gap fill the remaining months with EIA data. In the source columns, we have an option that states this (i.e. "EIA non-ozone season distributed and EPA/CAMD ozone season" for heat input and "Estimated using emissions factor and EIA data for non-ozone season and EPA/CAMD ozone season emissions" or "Estimated based on unit-level NOx emission rates and EPA/CAMD ozone season emissions" for annual NOx). We want to make sure that the NOx emissions we've assigned for these aren't extremely large outliers - especially compared to the ozone season values for NOx at the plant. So you'd filter the NOx source for these sources and then filter the NOx annual emissions from largest to smallest and see how those large ones compare to the ozone season NOx value. If super high we want to note that we need to look into that plant/unit.

*Can we set a "super high" value? Do a stats test?*

## Ozone emissions and heat input

Ozone emissions and heat input values must not be greater than annual values.

```{r}
#| label: unit_ozone
#| echo: false
#| warning: false

check_unit_ozone <- 
  unit_file %>% filter((noxoz > noxan) | (htioz > htian))

ifelse(nrow(check_unit_ozone) == 0, 
       "All ozone emissions and heat input values are less than annual values.", 
        {glue::glue("{nrow(check_unit_ozone)} units have heat input values greater than annual values."); 
          knitr::kable(check_unit_fc_pm %>% selet(plant_name, plant_id, unit_id))})
```

## Positive annual heat input, missing ozone season for CAMD plants

Check if units with a positive annual heat input are missing ozone season data.

*Is this data for ozone season heat input?*

```{r}
#| label: unit_ozone_missing
#| echo: false
#| warning: false

check_unit_ozone_input <- 
  unit_file %>% filter(!is.na(htian) & is.na(htioz))

ifelse(nrow(check_unit_ozone_input) == 0, 
       "All annual heat inputs have ozone heat inputs.", 
        {glue::glue("{nrow(check_unit_ozone_input)} units have ."); 
          knitr::kable(check_unit_fc_pm %>% selet(plant_name, plant_id, unit_id))})

```

## Duplicate units

Check if there are any duplicate units. There should be zero.

```{r}
#| label: unit_duplicates
#| echo: false
#| warning: false

check_unit_duplicates <- 
  unit_file %>% group_by(plant_id, unit_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_unit_duplicates) == 0, "No duplicates.", 
        {glue::glue("{nrow(check_unit_duplicates)} units are duplicated."); 
          knitr::kable(check_unit_duplicates)})

```

## Negative emissions values

Check if any emission values are negative.

```{r}
#| label: unit_negative_emissions
#| echo: false
#| warning: false


```

## Emissions from renewable fuels

Check if there are positive emission values from renewable fuels. There should be zero. The emission values to check are:

-   unadjusted annual NOx

-   unadjusted ozone NOx

-   unadjusted annual SO2

-   unadjusted annual CO2

-   unadjusted annual Hg

```{r}
#| label: unit_renewable_emissions
#| echo: false
#| warning: false


```

## Primary fuel blanks

Check if any primary fuel rows are blank.

```{r}
#| label: unit_primary_fuel
#| echo: false
#| warning: false


```

## Check CAMD flag and program code

Check if units with a CAMD flag have a program code. Columns: PRGCODE and CAMDFLAG.

```{r}
#| label: unit_camd_flag
#| echo: false
#| warning: false



```

## Emissions without heat input 

Check if any units that have emission values are missing heat input values.

```{r}
#| label: unit_heat_input_missing
#| echo: false
#| warning: false



```

## Heat input without emissions 

Check if any units have heat input values are missing emission values.

```{r}
#| label: unit_emissions_missing
#| echo: false
#| warning: false



```

## Blanks in heat input and emissions

## Positive NOx, missing SO2

# Plant File QA 

## Difference in latitude and longitude 

Check if plants have a difference in longitude and latitude in comparison to previous year data. This is checked to three decimal points.

## Facilities that change CHP status from previous year 

## Mislabeled subregions 

look at plants on map to see if any outliers in subregions and fix accordingly

## FC prime mover 

FC prime mover should have no (NA) values for:

-   CO2

-   CH4

-   N2O

-   combustion heat input

    ```{r}
    #| label: plant_fc_pm
    #| echo: false
    #| warning: false


    ```

## Biomass adjustment emissions 

# adjusted emissions not greater than unadjusted emissions

## Ozone emissions and heat input check --------

# ozone emissions and heat input not greater than annual emissions

## No duplicate plants -------

## Negative emission values ------

## Emission rate outliers --------

## Capacity factor \> 1 --------

## Electric allocation factor \> 1 or \< 0 --------

## Blank subregions --------

## NB factor \> 1 or \< 0 -----------

## Blank primary fuel --------

## Primary fuel category == primary fuel ----------

## Emissions without heat input --------

## Resource mix adds to 100 -------

# Subregion, state, BA, NERC File QA ---------

## No duplicates ---------

## Resource mix adds to 100 -----------

## Appropriate number of digits for fuel specific input rates --------

# Subregion File Only QA -----------

## Outlier check for emission rates ---------

# All file QA ---------

## Count of plants in generator, unit, and plant file are equivalent --------

## Sum of generation and emission equivalent between files --------

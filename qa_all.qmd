---
title: "QA All Files"
format: html
editor: visual
toc: true
---

This markdown file performs QA on the following files:

-   Master database

-   CHP database

-   Generator file

-   Unit file

-   Plant file

-   Region aggregation files

-   Subregion file

-   All file comparison

-   Output file

Each QA step will return a list of of issues raised. If there are no issues in the step, nothing will be returned.

```{r}
#| label: load_libraries
#| echo: false
#| warning: false

library(dplyr) 
library(tidyr) 
library(readr) 
library(readxl) 
library(stringr)

```

# Master Database

<!--# Need to check what files these are. -->

## Compare plants between EIA and CAMD

Check if any plants are only in the CAMD data and not EIA data. These plants will be checked with EPA to see if there are any ORIS (plant ID) matches we should be making or if the plants should be deleted.

<!--# Check if this is both EIA datasets or one. -->

```{r}
#| label: compare_eia_camd
#| echo: false
#| warning: false

camd <- read_rds("data/clean_data/camd/camd_clean.RDS")
eia_860 <- read_rds("data/clean_data/eia_860_clean.RDS") 
eia_923 <- read_rds("data/clean_data/eia_923_clean.RDS")

compare_plants <- 
  camd %>% select(plant_id, plant_name) %>% distinct() %>% 
  full_join(eia_860$combined %>% select(plant_id) %>% distinct() %>% 
              mutate(eia_860_plant_id = plant_id), by = "plant_id") %>% 
  full_join(eia_923$generation_and_fuel_combined %>% 
              select(plant_id) %>% distinct() %>% 
              mutate(eia_923_plant_id = plant_id), by = "plant_id")

check_compare_plants <- 
  compare_plants %>% 
  filter(!is.na(plant_id) & is.na(eia_860_plant_id) & is.na(eia_923_plant_id))

ifelse(nrow(check_compare_plants) == 0, "No plants in CAMD not in EIA.", 
        glue::glue("{nrow(check_compare_plants)} plants in CAMD not in EIA."))

knitr::kable(check_compare_plants %>% select(plant_id, plant_name))

```

## Biomass units added table

## OG/OTH fuel crosswalks

## CAMD fuel crosswalks

# CHP Database

## Retirement year to current year

```{r}
#| label: chp_retire_year
#| echo: false
#| warning: false



```

# Generator File

Load generator file.

```{r}
#| label: load_gen_file
#| echo: false
#| warning: false

generator_file <- read_rds("data/outputs/generator_file.RDS")

```

## Retirement year to current data year

<!--# Is this for plants retired in current year? -->

```{r}
#| label: generator_retirement 
#| echo: false
#| warning: false

check_gen_retirement<- 
  generator_file %>% filter(status == "RE" | !is.na(retirement_year))

ifelse(nrow(check_gen_retirement) == 0, "No retirements to update.", 
       glue::glue("{nrow(check_gen_retirement)} generators to update retirements."))

knitr::kable(check_gen_retirement %>% select(plant_id, generator_id, plant_name))

```

## Duplicate generators

Check if there are any duplicate generators. There should be zero.

```{r}
#| label: generator_duplicates 
#| echo: false
#| warning: false

check_gen_duplicates <- 
  generator_file %>% group_by(plant_id, generator_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_gen_duplicates) == 0, "No duplicates.", 
        glue::glue("{nrow(check_gen_duplicates)} generators are duplicated."))

knitr::kable(check_gen_duplicates %>% select(plant_id, generator_id, plant_name))

```

## Retired units with generation

Check if there are any retired units that are not retired in the current year that have generation values.

<!--# Are units retired before this year included? Ask about this. -->

```{r}
#| label: generator_retired_gen 
#| echo: false
#| warning: false

check_gen_retirement_generation <- 
  generator_file %>% 
  filter(status == "RE")

ifelse(nrow(check_gen_retirement_generation == 0), "No retired units to udpate.", 
        glue::glue("{nrow(check_gen_duplicates)} retired units to be updated."))

knitr::kable(check_gen_retirement_generation %>% 
                         select(plant_name, plant_id, generator_id))

```

# Unit File QA

Load unit file.

Currently using unit file data from published eGRID 2021.

```{r}
#| label: load_unit_file
#| echo: false
#| warning: false

unit_file <- read_excel("archive/egrid2021_data.xlsx", sheet = "UNT21", skip = 1) %>% 
  janitor::clean_names() %>% 
  rename("plant_name" = "pname", 
         "plant_id" = "orispl", 
         "unit_id" = "unitid", 
         "status" = "untopst")

```

## FC prime mover

FC prime mover units must not have any CO2 emissions or sources.

```{r}
#| label: unit_fc_pm
#| echo: false
#| warning: false

check_unit_fc_pm <- 
  unit_file %>% filter(prmvr == "FC" & !is.na(co2an)) 

ifelse(nrow(check_unit_fc_pm) == 0, "All CO2 values for FC prime mover are NA.", 
        glue::glue("{nrow(check_unit_fc_pm)} FC units have non-zero CO2 values."))
  
knitr::kable(check_unit_fc_pm %>% select(plant_name, plant_id, unit_id))
```

## Retirement year to current year

Update retirement year to current year for retired units.

<!--# Need clarification here. -->

<!--# Retirement year column does not exist in unit file? -->

```{r}
#| label: unit_retirement_cur_year
#| echo: false
#| warning: false

check_unit_retirement<- 
  unit_file %>% filter(status == "RE")

ifelse(nrow(check_unit_retirement) == 0, "No retirement years to update.", 
        glue::glue("{nrow(check_unit_retirement)} units to update retirement year."))

knitr::kable(check_unit_retirement %>% select(plant_name, plant_id, unit_id))

```

## Heat input / emissions values for retired units

Check if any CAMD units that retired in current data year have heat input / emission values.

```{r}
#| label: unit_values_retired
#| echo: false
#| warning: false

check_unit_retired_values <- 
  unit_file %>% filter(camdflag == "Yes" & status == "RE" & (htian > 0 | 
                                                             htioz > 0 |
                                                             noxan > 0 |
                                                             noxoz > 0 |
                                                             so2an > 0 |
                                                             co2an > 0))

ifelse(nrow(check_unit_retired_values) == 0, 
       "No units that are retired and have positive heat input or emissions.", 
        glue::glue("{nrow(check_unit_retirement)} units that are retired and 
                   have positive heat input or emissions."))

knitr::kable(check_unit_retired_values %>% select(plant_name, plant_id, unit_id))

```

## CAMD ozone season reporter outliers

Some CAMD units only report their ozone season emissions, so we try to gap fill the remaining months with EIA data. In the source columns, we have an option that states this (i.e. "EIA non-ozone season distributed and EPA/CAMD ozone season" for heat input and "Estimated using emissions factor and EIA data for non-ozone season and EPA/CAMD ozone season emissions" or "Estimated based on unit-level NOx emission rates and EPA/CAMD ozone season emissions" for annual NOx). We want to make sure that the NOx emissions we've assigned for these aren't extremely large outliers - especially compared to the ozone season values for NOx at the plant. So you'd filter the NOx source for these sources and then filter the NOx annual emissions from largest to smallest and see how those large ones compare to the ozone season NOx value. If super high we want to note that we need to look into that plant/unit.

<!--# Can we set a "super high" value? Do a stats test? -->

```{r}
#| label: unit_nox_outliers
#| echo: false
#| warning: false

check_unit_nox_outliers <- 
  unit_file %>% 
  filter(noxansrc %in% 
           c("Estimated using emissions factor and EIA data for non-ozone season 
             and EPA/CAMD ozone season emissions", 
             "Estimated based on unit-level NOx emission rates and EPA/CAMD ozone season emissions")) %>% 
  arrange(desc(noxan)) %>% select(plant_name, plant_id, unit_id, noxan, noxoz)

knitr::kable(check_unit_nox_outliers)

```

## Ozone emissions and heat input

Ozone emissions and heat input values must not be greater than annual values.

```{r}
#| label: unit_ozone
#| echo: false
#| warning: false

check_unit_ozone <- 
  unit_file %>% filter((noxoz > noxan) | (htioz > htian))

ifelse(nrow(check_unit_ozone) == 0, 
       "All ozone emissions and heat input values are less than annual values.", 
        glue::glue("{nrow(check_unit_ozone)} units have heat input values greater 
                    than annual values.")) 

knitr::kable(check_unit_ozone %>% select(plant_name, plant_id, unit_id))
```

## Positive annual heat input, missing ozone season for CAMD plants

Check if units with a positive annual heat input are missing ozone season data.

<!--# Is this data for ozone season heat input? -->

```{r}
#| label: unit_ozone_missing
#| echo: false
#| warning: false

check_unit_ozone_input <- 
  unit_file %>% filter(!is.na(htian) & is.na(htioz))

ifelse(nrow(check_unit_ozone_input) == 0, 
       "All annual heat inputs have ozone heat inputs.", 
        glue::glue("{nrow(check_unit_ozone_input)} units have positive annual heat input with 
                   missing ozone season  heat input."))

knitr::kable(check_unit_ozone_input %>% select(plant_name, plant_id, unit_id))

```

## Duplicate units

Check if there are any duplicate units. There should be zero.

```{r}
#| label: unit_duplicates
#| echo: false
#| warning: false

check_unit_duplicates <- 
  unit_file %>% group_by(plant_id, unit_id) %>% 
  filter(n() > 1)

ifelse(nrow(check_unit_duplicates) == 0, "No duplicates.", 
        glue::glue("{nrow(check_unit_duplicates)} units are duplicated."))

knitr::kable(check_unit_duplicates %>% select(plant_name, plant_id, unit_id))
```

## Negative emissions values

Check if any emission values are negative. The emissions to check are:

-   unadjusted annual NOx

-   unadjusted ozone NOx

-   unadjusted annual SO2

-   unadjusted annual CO2

-   unadjusted annual Hg

```{r}
#| label: unit_negative_emissions
#| echo: false
#| warning: false

check_unit_negative_emissions <- 
  unit_file %>% filter(noxan < 0 |
                       noxoz < 0 |
                       so2an < 0 |
                       co2an < 0 |
                       hgan < 0)

ifelse(nrow(check_unit_negative_emissions) == 0, "No negative emissions.", 
        glue::glue("{nrow(check_unit_negative_emissions)} units have negative emissions."))

knitr::kable(check_unit_negative_emissions %>% select(plant_name, plant_id, unit_id, noxan, noxoz, so2an, co2an))
```

## Emissions from zero emission fuels

Check if there are positive emission values from zero-emission fuels. There should be zero. The emission values to check are:

-   unadjusted annual NOx

-   unadjusted ozone NOx

-   unadjusted annual SO2

-   unadjusted annual CO2

-   unadjusted annual Hg

```{r}
#| label: unit_zero_emissions
#| echo: false
#| warning: false

check_unit_zero_emissions <- 
  unit_file %>% filter(fuelu1 %in% c("WAT", "WND", "SUN", "NUC") & 
                         (!is.na(noxan) | noxan > 0 |
                         !is.na(noxoz) | noxoz > 0 |
                         !is.na(so2an) | so2an > 0 |
                         !is.na(co2an) | co2an > 0 |
                         !is.na(hgan) | hgan > 0)) 

ifelse(nrow(check_unit_zero_emissions) == 0, "No positive emissions for zero emissions technologies.", 
        glue::glue("{nrow(check_zero_emissions)} zero emission units have positive emissions."))

knitr::kable(check_unit_zero_emissions %>% select(plant_name, plant_id, unit_id, fuelu1, 
                                                  noxan, noxoz, so2an, co2an, hgan))
```

## Primary fuel blanks

Check if any primary fuel rows are blank.

```{r}
#| label: unit_primary_fuel
#| echo: false
#| warning: false

check_unit_primary_fuel <- 
  unit_file %>% filter(is.na(fuelu1))

ifelse(nrow(check_unit_primary_fuel) == 0, "No units have blank primary fuels.", 
        glue::glue("{nrow(check_unit_primary_fuel)} units have blank primary fuels."))

knitr::kable(check_unit_primary_fuel %>% select(plant_name, plant_id, unit_id, fuelu1, htian, htioz))

```

## Check CAMD flag and program code

Check if units with a CAMD flag have no program code. Columns: PRGCODE and CAMDFLAG.

```{r}
#| label: unit_camd_flag
#| echo: false
#| warning: false

check_unit_program_code <- 
  unit_file %>% filter(camdflag == "Yes" & is.na(prgcode))

ifelse(nrow(check_unit_program_code) == 0, "All CAMD flags have a program code.", 
        glue::glue("{nrow(check_unit_program_code)} units have CAMD flag but no program code."))

knitr::kable(check_unit_program_code %>% select(plant_name, plant_id, unit_id))

```

## Emissions without heat input

Check if any units that have emission values are missing heat input values.

```{r}
#| label: unit_heat_input_missing
#| echo: false
#| warning: false

check_unit_heat_input <- 
  unit_file %>% filter((noxan > 0 | noxoz > 0 | so2an > 0 | co2an > 0 | hgan > 0) &
                       (is.na(htian) | is.na(htioz)))

ifelse(nrow(check_unit_heat_input) == 0, "All units with emissions have 
       heat input values.", 
        glue::glue("{nrow(check_unit_heat_input)} units with emissions are missing heat input values."))

knitr::kable(check_unit_heat_input %>% select(plant_name, plant_id, unit_id, htian, htioz, 
                                              noxan, noxoz, so2an, co2an, hgan))

```

## Heat input without emissions

Check if any units have heat input values are missing emission values.

<!--# Can some units have only some emission types? Should "WH" and "PUR" be included? -->

```{r}
#| label: unit_emissions_missing
#| echo: false
#| warning: false

check_unit_emissions <- 
  unit_file %>% filter((!(fuelu1 %in% c("WAT", "WND", "SUN", "NUC", "MWH"))) & 
                       (!(prmvr == "FC")) & 
                       (is.na(noxan) & is.na(noxoz) & is.na(so2an) & is.na(co2an)) &
                       (htian > 0 | htioz > 0))

ifelse(nrow(check_unit_emissions) == 0, "All units with heat inputs 
       have emission values.", 
        glue::glue("{nrow(check_unit_emissions)} units with heat inputs are missing emission values."))

knitr::kable(check_unit_emissions %>% select(plant_name, plant_id, unit_id, fuelu1, prmvr, 
                                             htian, htioz, noxan, noxoz, so2an, co2an, hgan))

```

## Blanks in heat input and emissions

Check if units have blanks in heat input and emissions.

<!--# which emissions are included here? -->

```{r}
#| label: unit_blanks
#| echo: false
#| warning: false

check_unit_blanks <- 
  unit_file %>% filter(is.na(htian) | is.na(htioz) | is.na(noxan) | is.na(noxoz) 
                       | is.na(so2an) | is.na(co2an))


```

## Positive NOx, missing SO2

Check if units have positive NOx values and missing SO2 values.

```{r}
#| label: unit_nox_so2
#| echo: false
#| warning: false

check_unit_nox_so2 <- 
  unit_file %>% filter((noxan > 0) & (is.na(so2an) | so2an == 0))

ifelse(nrow(check_unit_nox_so2) == 0, "All units with positive NOx values 
       have positive SO2 values.", 
       glue::glue("{nrow(check_unit_emissions)} units with positive NOx values have NA or 0 SO2 values."))

knitr::kable(check_unit_nox_so2 %>% select(plant_name, plant_id, unit_id, fuelu1, 
                                           prmvr, noxan, noxoz, so2an))

```

# Plant File QA

Load current year plant file and previous year plant file.

```{r}
#| label: load_plant_data
#| echo: false
#| warning: false

plant_file <- read_excel("archive/egrid2021_data.xlsx", sheet = "PLNT21", skip = 1) %>% 
              janitor::clean_names() %>% 
              rename("plant_id" = "orispl", 
                     "plant_name" = "pname")

plant_file_prev <- read_excel("archive/egrid2020_data.xlsx", 
                              sheet = "PLNT20", skip = 1) %>% 
              janitor::clean_names() %>% 
              rename("plant_id" = "orispl", 
                     "plant_name" = "pname", 
                     "lat_prev" = "lat", 
                     "lon_prev" = "lon", 
                     "chpflag_prev" = "chpflag")

```

## Difference in latitude and longitude

Check if plants have a difference in longitude and latitude in comparison to previous year data. This is checked to three decimal points.

```{r}
#| label: plant_lat_long
#| echo: false
#| warning: false

plant_file_lat_lon <- 
  plant_file %>% select(plant_id, lat, lon) %>% 
  left_join(plant_file_prev %>% select(plant_id, lat_prev, lon_prev), 
            by = "plant_id") %>% 
  mutate(across(where(is.numeric), round, 3))

check_plant_lat_lon <- 
  plant_file_lat_lon %>% mutate(lat_diff = abs(lat) - abs(lat_prev), 
                                lon_diff = abs(lon) - abs(lon_prev)) %>% 
  filter(!(lat_diff == 0) | !(lon_diff == 0) | is.na(lat) | is.na(lon))

ifelse(nrow(check_plant_lat_lon) == 0, "All plants have the same lat/lon as 
       previous year.", 
        glue::glue("{nrow(check_plant_lat_lon)} plants have different lat/lon than last year."))
  
knitr::kable(check_plant_lat_lon %>% select(plant_id, lat, lat_prev, lat_diff,
                                            lon, lon_prev, lon_diff))

```

## CHP status change

Check if CHP status has changed from previous year.

```{r}
#| label: plant_chp_flag
#| echo: false
#| warning: false

plant_chp_flag <- 
  plant_file %>% 
  left_join(plant_file_prev, by = c("plant_id")) %>% 
  mutate(chp_comparison = ifelse(chpflag == chpflag_prev, "Same", 
                                 "Changed"))
  
check_plant_chp_flag <- 
  plant_chp_flag %>% filter(chp_comparison == "Changed")
  

ifelse(nrow(check_plant_chp_flag) == 0, "No CHP flags are different", 
        glue::glue("{nrow(check_plant_chp_flag)} plants have different CHP flags than last year."))

knitr::kable(check_plant_chp_flag %>% select(plant_id, chpflag, chpflag_prev))

```

## Mislabeled subregions

Map plants for each region and fix accordingly if needed.

Load in shapefiles.

```{r}
#| label: load_subregion_shapefile 
#| echo: false 
#| warning: false
#| results: false

sbrgn_shp <- sf::st_read("archive/egrid2021_subregions_shapefile/eGRID2021 Subregions Shapefile final.shp") %>% drop_na() %>% rename("subregion" = "SUBRGN") %>% 
  sf::st_transform(crs = "EPSG:4326")

multi_sbrgn_shp <- sf::st_read("archive/egrid2021_multiple_subregions_shapefile/eGRID2021 Multiple Subregions Shapefile final.shp") %>% 
  drop_na() %>% 
  rename("subregion" = "SUBRGN") %>% 
  sf::st_transform(crs = "EPSG:4326")

# plot subregions
#ggplot2::ggplot(sbrgn_shp[1]) + 
#  ggplot2::geom_sf() + 
#  ggplot2::coord_sf(xlim = c(-166, -67), ylim = c(19, 71))

#ggplot2::ggplot(multi_sbrgn_shp[1]) + 
#  ggplot2::geom_sf() + 
#  ggplot2::coord_sf(xlim = c(-166, -67), ylim = c(19, 71))

sf::sf_use_s2(FALSE)

```

Check if plant locations are in regions. If there are any plants that are not in the region or in the overlapping regions, they will appear in the table. Some of the plants in the table may be due to being on the edge of region boundaries.

::: panel-tabset
### AKGD

```{r}
#| label: AKGD_map 
#| echo: false 
#| warning: false  

AKGD_plants <- plant_file %>% filter(subrgn == "AKGD") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") 

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) + 
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = AKGD_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(AKGD_plants)[1] - 5, 
                             sf::st_bbox(AKGD_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AKGD_plants)[2] - 3, 
                             sf::st_bbox(AKGD_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
# this may not be necessary
AKGD_shp <- sbrgn_shp %>% filter(subregion == "AKGD") %>% 
  sf::st_transform(crs = "EPSG:4326")

AKGD_plants <- 
  AKGD_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKGD_plants, AKGD_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKGD_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AKGD_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 

```

### AKMS

```{r}
#| label: AKMS_summary 
#| echo: false 
#| warning: false  

AKMS_plants <- plant_file %>% filter(subrgn == "AKMS") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") 

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = AKMS_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(AKMS_plants)[1] - 5, 
                             sf::st_bbox(AKMS_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AKMS_plants)[2] - 3, 
                             sf::st_bbox(AKMS_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
AKMS_shp <- sbrgn_shp %>% filter(subregion == "AKMS") %>% 
  sf::st_transform(crs = "EPSG:4326")

AKMS_plants <- 
  AKMS_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKMS_plants, AKMS_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AKMS_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AKMS_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### AZNM

```{r}
#| label: AZNM_summary 
#| echo: false 
#| warning: false  

AZNM_plants <- plant_file %>% filter(subrgn == "AZNM") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = AZNM_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(AZNM_plants)[1] - 5, 
                             sf::st_bbox(AZNM_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(AZNM_plants)[2] - 3, 
                             sf::st_bbox(AZNM_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
AZNM_shp <- sbrgn_shp %>% filter(subregion == "AZNM") %>% 
  sf::st_transform(crs = "EPSG:4326")

AZNM_plants <- 
  AZNM_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AZNM_plants, AZNM_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(AZNM_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(AZNM_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### CAMX

```{r}
#| label: CAMX_summary 
#| echo: false 
#| warning: false  

CAMX_plants <- plant_file %>% filter(subrgn == "CAMX") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = CAMX_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(CAMX_plants)[1] - 5, 
                             sf::st_bbox(CAMX_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(CAMX_plants)[2] - 3, 
                             sf::st_bbox(CAMX_plants)[4] + 3), 
                    expand = TRUE) 

# create table of plants not in region or multi-region area
CAMX_shp <- sbrgn_shp %>% filter(subregion == "CAMX") %>% 
  sf::st_transform(crs = "EPSG:4326")

CAMX_plants <- 
  CAMX_plants %>% 
  mutate(in_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(CAMX_plants, CAMX_shp)$plant_id),
                        TRUE, FALSE),
         multi_region_check = ifelse(plant_id %in% 
                        c(sf::st_filter(CAMX_plants, multi_sbrgn_shp)$plant_id),
                        TRUE, FALSE))

knitr::kable(CAMX_plants %>% filter(in_region_check == FALSE & 
                                      multi_region_check == FALSE)) 
```

### ERCT

```{r}
#| label: ERCT_summary 
#| echo: false 
#| warning: false  

ERCT_plants <- plant_file %>% filter(subrgn == "ERCT") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = ERCT_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(ERCT_plants)[1] - 5, 
                             sf::st_bbox(ERCT_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(ERCT_plants)[2] - 3, 
                             sf::st_bbox(ERCT_plants)[4] + 3), 
                    expand = TRUE) 
```

### FRCC

```{r}
#| label: FRCC_summary 
#| echo: false 
#| warning: false  

FRCC_plants <- plant_file %>% filter(subrgn == "FRCC") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = FRCC_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(FRCC_plants)[1] - 2, 
                             sf::st_bbox(FRCC_plants)[3] + 2), 
                    ylim = c(sf::st_bbox(FRCC_plants)[2] - 2, 
                             sf::st_bbox(FRCC_plants)[4] + 2), 
                    expand = TRUE) 
```

### HIMS

```{r}
#| label: HIMS_summary 
#| echo: false 
#| warning: false  

HIMS_plants <- plant_file %>% filter(subrgn == "HIMS") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = HIMS_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(HIMS_plants)[1] - 1, 
                             sf::st_bbox(HIMS_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(HIMS_plants)[2] - 1, 
                             sf::st_bbox(HIMS_plants)[4] + 1), 
                    expand = TRUE) 
```

### HIOA

```{r}
#| label: HIOA_summary 
#| echo: false 
#| warning: false  

HIOA_plants <- plant_file %>% filter(subrgn == "HIOA") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = HIOA_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(HIOA_plants)[1] - 1, 
                             sf::st_bbox(HIOA_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(HIOA_plants)[2] - 1, 
                             sf::st_bbox(HIOA_plants)[4] + 1), 
                    expand = TRUE) 
```

### MROE

```{r}
#| label: MROE_summary 
#| echo: false 
#| warning: false  

MROE_plants <- plant_file %>% filter(subrgn == "MROE") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = MROE_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(MROE_plants)[1] - 5, 
                             sf::st_bbox(MROE_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(MROE_plants)[2] - 3, 
                             sf::st_bbox(MROE_plants)[4] + 3), 
                    expand = TRUE) 
```

### MROW

```{r}
#| label: MROW_summary 
#| echo: false 
#| warning: false  

MROW_plants <- plant_file %>% filter(subrgn == "MROW") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = MROW_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(MROW_plants)[1] - 5, 
                             sf::st_bbox(MROW_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(MROW_plants)[2] - 3, 
                             sf::st_bbox(MROW_plants)[4] + 1), 
                    expand = TRUE) 
```

### NEWE

```{r}
#| label: NEWE_summary 
#| echo: false 
#| warning: false  

NEWE_plants <- plant_file %>% filter(subrgn == "NEWE") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = NEWE_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(NEWE_plants)[1] - 3, 
                             sf::st_bbox(NEWE_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(NEWE_plants)[2] - 1, 
                             sf::st_bbox(NEWE_plants)[4] + 1), 
                    expand = TRUE) 
```

### NWPP

```{r}
#| label: NWPP_summary 
#| echo: false 
#| warning: false  

NWPP_plants <- plant_file %>% filter(subrgn == "NWPP") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = NWPP_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(NWPP_plants)[1] - 2, 
                             sf::st_bbox(NWPP_plants)[3] + 5), 
                    ylim = c(sf::st_bbox(NWPP_plants)[2] - 3, 
                             sf::st_bbox(NWPP_plants)[4] + 1), 
                    expand = TRUE) 
```

### NYCW

```{r}
#| label: NYCW_summary 
#| echo: false 
#| warning: false  

NYCW_plants <- plant_file %>% filter(subrgn == "NYCW") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = NYCW_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(NYCW_plants)[1] - 1, 
                             sf::st_bbox(NYCW_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(NYCW_plants)[2] - 1, 
                             sf::st_bbox(NYCW_plants)[4] + 1), 
                    expand = TRUE) 
```

### NYLI

```{r}
#| label: NYLI_summary 
#| echo: false 
#| warning: false  

NYLI_plants <- plant_file %>% filter(subrgn == "NYLI") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = NYLI_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(NYLI_plants)[1] - 1, 
                             sf::st_bbox(NYLI_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(NYLI_plants)[2] - 1, 
                             sf::st_bbox(NYLI_plants)[4] + 1), 
                    expand = TRUE) 
```

### NYUP

```{r}
#| label: NYUP_summary 
#| echo: false 
#| warning: false  

NYUP_plants <- plant_file %>% filter(subrgn == "NYUP") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = NYUP_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(NYUP_plants)[1] - 2, 
                             sf::st_bbox(NYUP_plants)[3] + 2), 
                    ylim = c(sf::st_bbox(NYUP_plants)[2] - 2, 
                             sf::st_bbox(NYUP_plants)[4] + 2), 
                    expand = TRUE) 
```

### PRMS

```{r}
#| label: PRMS_summary 
#| echo: false 
#| warning: false  

PRMS_plants <- plant_file %>% filter(subrgn == "PRMS") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = PRMS_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(PRMS_plants)[1] - 1, 
                             sf::st_bbox(PRMS_plants)[3] + 1), 
                    ylim = c(sf::st_bbox(PRMS_plants)[2] - 1, 
                             sf::st_bbox(PRMS_plants)[4] + 1), 
                    expand = TRUE) 
```

### RFCE

```{r}
#| label: RFCE_summary 
#| echo: false 
#| warning: false  

RFCE_plants <- plant_file %>% filter(subrgn == "RFCE") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = RFCE_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(RFCE_plants)[1] - 3, 
                             sf::st_bbox(RFCE_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCE_plants)[2] - 2, 
                             sf::st_bbox(RFCE_plants)[4] + 2), 
                    expand = TRUE) 
```

### RFCM

```{r}
#| label: RFCM_summary 
#| echo: false 
#| warning: false  

RFCM_plants <- plant_file %>% filter(subrgn == "RFCM") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = RFCM_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(RFCM_plants)[1] - 3, 
                             sf::st_bbox(RFCM_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCM_plants)[2] - 2, 
                             sf::st_bbox(RFCM_plants)[4] + 2), 
                    expand = TRUE) 
```

### RFCW

```{r}
#| label: RFCW_summary 
#| echo: false 
#| warning: false  

RFCW_plants <- plant_file %>% filter(subrgn == "RFCW") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = RFCW_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(RFCW_plants)[1] - 3, 
                             sf::st_bbox(RFCW_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RFCW_plants)[2] - 2, 
                             sf::st_bbox(RFCW_plants)[4] + 2), 
                    expand = TRUE)
```

### RMPA

```{r}
#| label: RMPA_summary 
#| echo: false 
#| warning: false  

RMPA_plants <- plant_file %>% filter(subrgn == "RMPA") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = RMPA_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(RMPA_plants)[1] - 3, 
                             sf::st_bbox(RMPA_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(RMPA_plants)[2] - 2, 
                             sf::st_bbox(RMPA_plants)[4] + 2), 
                    expand = TRUE)
```

### SPNO

```{r}
#| label: SPNO_summary 
#| echo: false 
#| warning: false  

SPNO_plants <- plant_file %>% filter(subrgn == "SPNO") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SPNO_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SPNO_plants)[1] - 3, 
                             sf::st_bbox(SPNO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SPNO_plants)[2] - 2, 
                             sf::st_bbox(SPNO_plants)[4] + 2), 
                    expand = TRUE)
```

### SPSO

```{r}
#| label: SPSO_summary 
#| echo: false 
#| warning: false  

SPSO_plants <- plant_file %>% filter(subrgn == "SPSO") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SPSO_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SPSO_plants)[1] - 3, 
                             sf::st_bbox(SPSO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SPSO_plants)[2] - 2, 
                             sf::st_bbox(SPSO_plants)[4] + 2), 
                    expand = TRUE)
```

### SRMV

```{r}
#| label: SRMV_summary 
#| echo: false 
#| warning: false  

SRMV_plants <- plant_file %>% filter(subrgn == "SRMV") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SRMV_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SRMV_plants)[1] - 3, 
                             sf::st_bbox(SRMV_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRMV_plants)[2] - 2, 
                             sf::st_bbox(SRMV_plants)[4] + 2), 
                    expand = TRUE)
```

### SRSO

```{r}
#| label: SRSO_summary 
#| echo: false 
#| warning: false  

SRSO_plants <- plant_file %>% filter(subrgn == "SRSO") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SRSO_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SRSO_plants)[1] - 3, 
                             sf::st_bbox(SRSO_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRSO_plants)[2] - 2, 
                             sf::st_bbox(SRSO_plants)[4] + 2), 
                    expand = TRUE)
```

### SRTV

```{r}
#| label: SRTV_summary 
#| echo: false 
#| warning: false  

SRTV_plants <- plant_file %>% filter(subrgn == "SRTV") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SRTV_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SRTV_plants)[1] - 3, 
                             sf::st_bbox(SRTV_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRTV_plants)[2] - 2, 
                             sf::st_bbox(SRTV_plants)[4] + 2), 
                    expand = TRUE)
```

### SRVC

```{r}
#| label: SRVC_summary 
#| echo: false 
#| warning: false  

SRVC_plants <- plant_file %>% filter(subrgn == "SRVC") %>% 
  select(subrgn, plant_id, lat, lon) %>% sf::st_as_sf(coords = c("lon", "lat"), 
                                                      crs = "EPSG:4326") %>% 
  sf::st_transform(sf::st_crs(sbrgn_shp))

ggplot2::ggplot() + 
  ggplot2::geom_sf(data = sbrgn_shp, ggplot2::aes(fill = subregion)) +
  ggplot2::geom_sf(data = multi_sbrgn_shp, ggplot2::aes(color = "Multi-region")) +
  ggplot2::geom_sf(data = SRVC_plants) +
  ggplot2::coord_sf(xlim = c(sf::st_bbox(SRVC_plants)[1] - 3, 
                             sf::st_bbox(SRVC_plants)[3] + 3), 
                    ylim = c(sf::st_bbox(SRVC_plants)[2] - 2, 
                             sf::st_bbox(SRVC_plants)[4] + 2), 
                    expand = TRUE)
```
:::

## FC prime mover

FC prime mover should have no (NA) values for:

-   CO2

-   CH4

-   N2O

-   combustion heat input

    ```{r}
    #| label: plant_fc_pm
    #| echo: false
    #| warning: false

    # need to identify plants that ONLY have FC prime mover - and extract plant IDs
    unit_fc_prmvr <- unit_file %>% filter(prmvr == "FC") %>% distinct(plant_id) %>% 
      pull(plant_id) 

    unit_other_prmvr <- unit_file %>% filter(plant_id %in% unit_fc_prmvr) %>% 
      filter(!(prmvr == "FC")) %>% distinct(plant_id) %>% pull(plant_id) 

    check_plant_fc_values <- 
      plant_file %>% filter((plant_id %in% unit_fc_prmvr & 
                              !(plant_id %in% unit_other_prmvr)) &
                             (!is.na(plco2an) | !is.na(plch4an) | !is.na(pln2oan) | 
                              !is.na(plhtian))) 

    ifelse(nrow(check_plant_fc_values) == 0, "No plants with FC prime mover ONLY have values for CO2, N2O, CH4, or annual combustion heat input.", 
            glue::glue("{nrow(check_plant_fc_values)} plants with FC prime mover ONLY have values for CO2, N2O, CH4, or annual combustion heat input."))

    knitr::kable(check_plant_fc_values %>% select(plant_id, plant_name, plco2an, 
                                                  plch4an, pln2oan, plhtian))

    ```

## Biomass adjustment emissions

We have columns labeled BIOCO2, BIOCH4, etc. We want to make sure the value in that column is [not greater]{.underline} than the total unadjusted emissions (columns UNCO2, UNCH4, etc.). We have a query that should set BIO columns to equal UN columns if it is larger, so want to check that is working

```{r}
#| label: plant_biomass
#| echo: false
#| warning: false

check_plant_biomass_emissions <- 
  plant_file %>% filter((bionox > unnox) |
                          (bionoxoz > unnoxoz) |
                          (bioso2 > unso2) | 
                          (bioco2 > unco2) | 
                          (bioch4 > unch4) |
                          (bion2o > unn2o))

ifelse(nrow(check_plant_fc_values) == 0, "No plants have biomass emissions greater than unadjusted emissions.", 
        glue::glue("{nrow(check_plant_biomass_emissions)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name, unnox, 
                                                      bionox, unnoxoz, bionoxoz, 
                                                      unso2, bioso2, unco2, bioco2, 
                                                      unch4, bioch4, unn2o, bion2o))

```

## Ozone emissions and heat input check

For this, we want to check that the NOx ozone season emissions are not greater than the annual NOx emissions (so columns PLNOXAN and PLNOXOZ). Same with annual heat input and ozone season heat input (PLHTIAN and PLHTIOZ/PLHTIANT and PLHTIOZT).

```{r}
#| label: plant_ozone
#| echo: false
#| warning: false

check_plant_ozone <- 
  plant_file %>% filter((plnoxan < plnoxoz) |
                          (plhtian < plhtioz) |
                          (plhtiant < plhtiozt))

ifelse(nrow(check_plant_ozone) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_ozone)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name, plnoxan, 
                                                      plnoxoz, plhtian, plhtioz, 
                                                      plhtiant, plhtiozt))

```

## Duplicate plants

Check for duplicate plants. There should be none.

```{r}
#| label: plant_duplicates
#| echo: false
#| warning: false

check_plant_duplicate <- 
  plant_file %>% group_by(plant_id) %>% filter(n()>1)

ifelse(nrow(check_plant_duplicate) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_duplicate)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_biomass_emissions %>% select(plant_id, plant_name))

```

## Negative emission values

```{r}
#| label: plant_negative_emissions
#| echo: false
#| warning: false

check_plant_neg_emissions <- 
  plant_file %>% filter((plnoxan < 0) | (plnoxoz < 0) | (plso2an < 0), 
                        (plco2an < 0) | (plch4an < 0) | (pln2oan < 0))

ifelse(nrow(check_plant_neg_emissions) == 0, "No plants have ozone values greater than annual values", 
        glue::glue("{nrow(check_plant_neg_emissions)} plants have biomass emissions greater than unadjusted emissions."))

knitr::kable(check_plant_neg_emissions %>% select(plant_id, plant_name, plnoxan, 
                                                  plnoxoz, plso2an, plco2an, 
                                                  plch4an, pln2oan))

```

## Emission rate outliers

<!--# check which values to count -->

::: panel-tabset
## NOx

```{r}
#| label: plant_nox_outliers
#| echo: false
#| warning: false

plant_file %>% 
  count(plnoxra > 1) 

print()

knitr::kable(head(nox_input, 20))

```

## NOx ozone

```{r}
#| label: plant_noxoz_outliers
#| echo: false
#| warning: false



```

## SO2

```{r}
#| label: plant_so2_outliers
#| echo: false
#| warning: false



```

## CO2

```{r}
#| label: plant_co2_outliers
#| echo: false
#| warning: false



```

## CH4

```{r}
#| label: plant_ch4_outliers
#| echo: false
#| warning: false



```

## N2O

```{r}
#| label: plant_n2o_outliers
#| echo: false
#| warning: false



```
:::

## Capacity factor \> 1

## Electric allocation factor \> 1 or \< 0

## Blank subregions

## NB factor \> 1 or \< 0

## Blank primary fuel

## Primary fuel category == primary fuel

## Emissions without heat input

## Resource mix adds to 100

# Subregion, state, BA, NERC File QA

## No duplicates

## Resource mix adds to 100

## Appropriate number of digits for fuel specific input rates

# Subregion File Only QA

## Outlier check for emission rates

# All file QA

## Count of plants in generator, unit, and plant file are equivalent

## Sum of generation and emission equivalent between files
